using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using Entergy.PerformanceManagement.PMDTO;
using Microsoft.VisualBasic.CompilerServices;

namespace Entergy.PerformanceManagement.PMDB
{
	// Token: 0x0200001A RID: 26
	public class PMPointsDB
	{
		// Token: 0x0600025A RID: 602 RVA: 0x0001A93C File Offset: 0x00018D3C
		[DebuggerNonUserCode]
		public PMPointsDB()
		{
		}

		// Token: 0x0600025B RID: 603 RVA: 0x0001A948 File Offset: 0x00018D48
		public void InsertNullPoints(int cID, int year)
		{
			PerfMgDB.InsertNullPoints(cID, year);
		}

		// Token: 0x0600025C RID: 604 RVA: 0x0001A954 File Offset: 0x00018D54
		public void CarryOverPoints(int cID, int fromYear)
		{
			PerfMgDB.CarryOverPoints(cID, fromYear);
		}

		// Token: 0x0600025D RID: 605 RVA: 0x0001A960 File Offset: 0x00018D60
		public void CarryOverPoints(UPMPointsDTO data)
		{
			PerfMgDB.SaveCOPoints(data);
		}

		// Token: 0x0600025E RID: 606 RVA: 0x0001A96C File Offset: 0x00018D6C
		public List<UPMPointsDTO> GetUPMPointsDS(int dsID, int year, int month)
		{
			return PerfMgDB.GetUPMPointsByDS(dsID, year, month);
		}

		// Token: 0x0600025F RID: 607 RVA: 0x0001A988 File Offset: 0x00018D88
		public List<UPMPointsDTO> GetUPMPoints(int dsID, int year)
		{
			return PerfMgDB.GetUPMPoints(dsID, year);
		}

		// Token: 0x06000260 RID: 608 RVA: 0x0001A9A4 File Offset: 0x00018DA4
		public List<UPMPointsDTO> GetUPMPoints(int dsID, int year, string pointDesc)
		{
			return PerfMgDB.GetUPMPoints(dsID, year, pointDesc);
		}

		// Token: 0x06000261 RID: 609 RVA: 0x0001A9C0 File Offset: 0x00018DC0
		public List<UPMPointsDTO> GetUPMPoints(int year, string pointDesc, string contactID, List<string> seriesDesc)
		{
			return PerfMgDB.GetUPMPoints(year, pointDesc, contactID, seriesDesc);
		}

		// Token: 0x06000262 RID: 610 RVA: 0x0001A9DC File Offset: 0x00018DDC
		public int SavePointsArchive(UPMPointsDTO data)
		{
			return PerfMgDB.SavePointsArchive(data);
		}

		// Token: 0x06000263 RID: 611 RVA: 0x0001A9F4 File Offset: 0x00018DF4
		public int SavePointsArchiveTAB2(UPMPointsDTO data)
		{
			return PerfMgDB.SavePointsArchiveTAB2(data);
		}

		// Token: 0x06000264 RID: 612 RVA: 0x0001AA0C File Offset: 0x00018E0C
		public int SavePointsArchiveTAB3(UPMPointsDTO data)
		{
			return PerfMgDB.SavePointsArchiveTAB3(data);
		}

		// Token: 0x06000265 RID: 613 RVA: 0x0001AA24 File Offset: 0x00018E24
		public int SaveUPMPoints(UPMPointsDTO data)
		{
			return PerfMgDB.SaveUPMPoints(data);
		}

		// Token: 0x06000266 RID: 614 RVA: 0x0001AA3C File Offset: 0x00018E3C
		public int SaveUPMPointsTAB2(UPMPointsDTO data)
		{
			return PerfMgDB.SaveUPMPointsTAB2(data);
		}

		// Token: 0x06000267 RID: 615 RVA: 0x0001AA54 File Offset: 0x00018E54
		public int SaveUPMPointsTAB3(UPMPointsDTO data)
		{
			return PerfMgDB.SaveUPMPointsTAB3(data);
		}

		// Token: 0x06000268 RID: 616 RVA: 0x0001AA6C File Offset: 0x00018E6C
		public int DeleteUPMPoints(UPMPointsDTO data)
		{
			return PerfMgDB.DeleteUPMPoints(data);
		}

		// Token: 0x06000269 RID: 617 RVA: 0x0001AA84 File Offset: 0x00018E84
		public SqlCommand CreateSavePointsRequest(string operation, UPMPointsDTO data)
		{
			return PerfMgDB.CreateSavePointsRequest(operation, data);
		}

		// Token: 0x0600026A RID: 618 RVA: 0x0001AAA0 File Offset: 0x00018EA0
		public UPMPointsDTO GetUPMPointFromExcel(string chartID, int reportingYear, string pointDesc, string seriesDesc)
		{
			return PerfMgDB.GetUPMPointFromExcel(chartID, reportingYear, pointDesc, seriesDesc);
		}

		// Token: 0x0600026B RID: 619 RVA: 0x0001AABC File Offset: 0x00018EBC
		public List<PointsDescriptionDTO> GetPointsDescription()
		{
			return PerfMgDB.GetPointsDescription();
		}

		// Token: 0x0600026C RID: 620 RVA: 0x0001AAD4 File Offset: 0x00018ED4
		public string GetPointLevel(int dsID, CriteriaDTO criteria)
		{
			return PerfMgDB.GetPointLevel(dsID, criteria);
		}

		// Token: 0x0600026D RID: 621 RVA: 0x0001AAF0 File Offset: 0x00018EF0
		public List<DataEntryPointsDTO> GetDataEntryPointsInfo(int H_ID, CriteriaDTO criteria)
		{
			return PerfMgDB.GetDataEntryPointsInfo(H_ID, criteria);
		}

		// Token: 0x0600026E RID: 622 RVA: 0x0001AB0C File Offset: 0x00018F0C
		public string GetMaxMonth(int cID, int year)
		{
			return PerfMgDB.GetMaxMonth(cID, year);
		}

		// Token: 0x0600026F RID: 623 RVA: 0x0001AB28 File Offset: 0x00018F28
		public List<UPMPointsDTO> GetPointValue(int cID, string dataSeries, string month, int year)
		{
			List<UPMPointsDTO> list = this.GetPoints(cID, dataSeries, month, year);
			bool flag = list.Count == 0;
			List<UPMPointsDTO> list2;
			if (flag)
			{
				list = this.GetPoints(cID, dataSeries, month, year);
				flag = list.Count == 0;
				if (flag)
				{
					list2 = list;
				}
				else
				{
					list2 = null;
				}
			}
			else
			{
				list2 = list;
			}
			return list2;
		}

		// Token: 0x06000270 RID: 624 RVA: 0x0001AB80 File Offset: 0x00018F80
		public List<UPMPointsDTO> GetYTDValue(int cID, string month, int year)
		{
			return this.GetPointValue(cID, "YTD", month, year);
		}

		// Token: 0x06000271 RID: 625 RVA: 0x0001ABA0 File Offset: 0x00018FA0
		public List<UPMPointsDTO> GetTargetValue(int cID, string month, int year)
		{
			return this.GetPointValue(cID, "Target", month, year);
		}

		// Token: 0x06000272 RID: 626 RVA: 0x0001ABC0 File Offset: 0x00018FC0
		public List<UPMPointsDTO> GetMinimumValue(int cID, string month, int year)
		{
			return this.GetPointValue(cID, "Minimum", month, year);
		}

		// Token: 0x06000273 RID: 627 RVA: 0x0001ABE0 File Offset: 0x00018FE0
		public List<UPMPointsDTO> GetMaximumValue(int cID, string month, int year)
		{
			return this.GetPointValue(cID, "Maximum", month, year);
		}

		// Token: 0x06000274 RID: 628 RVA: 0x0001AC00 File Offset: 0x00019000
		public List<UPMPointsDTO> GetMonthlyValue(int cID, string month, int year)
		{
			return this.GetPointValue(cID, "Monthly", month, year);
		}

		// Token: 0x06000275 RID: 629 RVA: 0x0001AC20 File Offset: 0x00019020
		public List<UPMPointsDTO> GetMonthlyTargetValue(int cID, string month, int year)
		{
			return this.GetPointValue(cID, "Monthly Target", month, year);
		}

		// Token: 0x06000276 RID: 630 RVA: 0x0001AC40 File Offset: 0x00019040
		public List<UPMPointsDTO> GetMonthlyMinimumValue(int cID, string month, int year)
		{
			return this.GetPointValue(cID, "Monthly Minimum", month, year);
		}

		// Token: 0x06000277 RID: 631 RVA: 0x0001AC60 File Offset: 0x00019060
		public List<UPMPointsDTO> GetMonthlyMaximumValue(int cID, string month, int year)
		{
			return this.GetPointValue(cID, "Monthly Maximum", month, year);
		}

		// Token: 0x06000278 RID: 632 RVA: 0x0001AC80 File Offset: 0x00019080
		public List<UPMPointsDTO> GetPoints(int cID, string dataSeries, string month, int year)
		{
			return this.GetPointsbyDSID(this.GetDSID(cID, dataSeries), month, year);
		}

		// Token: 0x06000279 RID: 633 RVA: 0x0001ACA4 File Offset: 0x000190A4
		public List<UPMPointsDTO> GetPoints(int cID, string dataSeries, int year)
		{
			return this.GetPointsbyDSID(this.GetDSID(cID, dataSeries), year);
		}

		// Token: 0x0600027A RID: 634 RVA: 0x0001ACC8 File Offset: 0x000190C8
		private List<UPMPointsDTO> GetPointsbyDSID(int dsID, string month, int year)
		{
			PMPointsDB pmpointsDB = new PMPointsDB();
			return pmpointsDB.GetUPMPoints(dsID, year, month);
		}

		// Token: 0x0600027B RID: 635 RVA: 0x0001ACEC File Offset: 0x000190EC
		private List<UPMPointsDTO> GetPointsbyDSID(int dsID, int year)
		{
			PMPointsDB pmpointsDB = new PMPointsDB();
			return pmpointsDB.GetUPMPoints(dsID, year);
		}

		// Token: 0x0600027C RID: 636 RVA: 0x0001AD0C File Offset: 0x0001910C
		private int GetDSID(int cID, string dataSeries)
		{
			int num = -1;
			PMDataSeriesDB pmdataSeriesDB = new PMDataSeriesDB();
			try
			{
				foreach (DataSeriesDTO dataSeriesDTO in pmdataSeriesDB.GetUPMDataSeries(cID))
				{
					bool flag = Operators.CompareString(dataSeriesDTO.Description.ToUpper(), dataSeries.ToUpper(), false) == 0;
					if (flag)
					{
						num = (T)dataSeriesDTO.DSID;
					}
				}
			}
			finally
			{
				List<DataSeriesDTO>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			return num;
		}

		// Token: 0x0600027D RID: 637 RVA: 0x0001ADA0 File Offset: 0x000191A0
		public string GetPerformanceLevel(decimal min, decimal tar, decimal max, decimal actual, string inverseScale)
		{
			return PerfMgDB.GetPerformanceLevel(min, tar, max, actual, inverseScale);
		}
	}
}
