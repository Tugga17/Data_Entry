using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Entergy.PerformanceManagement.PMDTO;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace Entergy.PerformanceManagement.PMDB
{
	// Token: 0x02000012 RID: 18
	internal class PerfMgDB
	{
		// Token: 0x06000081 RID: 129 RVA: 0x000020F5 File Offset: 0x000002F5
		[DebuggerNonUserCode]
		public PerfMgDB()
		{
		}

		// Token: 0x1700000F RID: 15
		// (get) Token: 0x06000082 RID: 130 RVA: 0x000021E7 File Offset: 0x000003E7
		private static string ConnectionString
		{
			get
			{
				return "Server=prfdatap;Database=Perfmgr;User ID=perfmgr_dev;Password=perfmgr1;Trusted_Connection=no";
			}
		}

		// Token: 0x06000083 RID: 131 RVA: 0x00004F30 File Offset: 0x00003130
		public static List<string> GetListofString(string sql)
		{
			List<string> list = new List<string>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<string> list2;
			try
			{
				sqlConnection.Open();
				SqlDataReader sqlDataReader = new SqlCommand(sql, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))));
				}
				sqlDataReader.Close();
				sqlDataReader.Dispose();
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000084 RID: 132 RVA: 0x00005008 File Offset: 0x00003208
		public static List<string> GetMetricHierarchies(int cID)
		{
			List<string> list = new List<string>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "Select Distinct 'Incentive Measure'  as Displayed From t_inc_chartsPercents Where c_ID = @cID and Percents > 0 Union Select Distinct 'Scorecard: ' + ScorecardName From \tv_upm_scorecards Where c_ID = @cID Union Select Distinct 'User Scorecard: ' + DashboardName + ' (' + UserID + ')' From dbo.t_web_UserDashboardCharts where C_ID = @cID ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@cID", cID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(Conversions.ToString(sqlDataReader.GetValue(0)));
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list;
		}

		// Token: 0x06000085 RID: 133 RVA: 0x000021EE File Offset: 0x000003EE
		public static void SaveUPMMetrics(MetricDTO data)
		{
			PerfMgDB.SetUPMMetrics("S", data);
		}

		// Token: 0x06000086 RID: 134 RVA: 0x000021FE File Offset: 0x000003FE
		public static void DeleteUPMMetrics(MetricDTO data)
		{
			PerfMgDB.SetUPMMetrics("D", data);
		}

		// Token: 0x06000087 RID: 135 RVA: 0x000050F0 File Offset: 0x000032F0
		internal static SqlCommand CreateSaveCommentProviderRequest(string operation, MetricDTO data)
		{
			return new SqlCommand("dbo.usp_UPM_ChartCommentProviders_set")
			{
				CommandType = CommandType.StoredProcedure,
				Parameters = 
				{
					new SqlParameter("@Operation", operation),
					new SqlParameter("@C_ID", data.CID),
					new SqlParameter("@CommentProvider", data.CommentDataProvider)
				}
			};
		}

		// Token: 0x06000088 RID: 136 RVA: 0x0000516C File Offset: 0x0000336C
		internal static SqlCommand CreateSaveMetricsRequest(string operation, MetricDTO data)
		{
			SqlCommand sqlCommand = new SqlCommand("dbo.usp_UPM_Metrics_set");
			sqlCommand.CommandType = CommandType.StoredProcedure;
			sqlCommand.Parameters.Add(new SqlParameter("@Operation", operation));
			sqlCommand.Parameters.Add(new SqlParameter("@C_ID", data.CID));
			sqlCommand.Parameters.Add(new SqlParameter("@Chart_ID", data.MetricID));
			sqlCommand.Parameters.Add(new SqlParameter("@Chart_Name", data.MetricName));
			sqlCommand.Parameters.Add(new SqlParameter("@PM_Contact_ID", data.PMContactID));
			sqlCommand.Parameters.Add(new SqlParameter("@Lexicon_ID", data.LexiconID));
			sqlCommand.Parameters.Add(new SqlParameter("@Inverse_Scale", data.InverseScale));
			sqlCommand.Parameters.Add(new SqlParameter("@UserID", Environment.UserName));
			sqlCommand.Parameters.Add(new SqlParameter("@Active", data.Active));
			sqlCommand.Parameters.Add(new SqlParameter("@ConfidentialMeasure", data.ConfidentialMeasure));
			sqlCommand.Parameters.Add(new SqlParameter("@LevelID", data.MetricLevelID));
			bool flag = (Operators.CompareString(data.MetricTypeID, "", false) == 0) | (Operators.CompareString(data.MetricTypeID, string.Empty, false) == 0);
			if (flag)
			{
				data.MetricTypeID = "NA";
			}
			flag = (Operators.CompareString(data.MetricQualifierID, "", false) == 0) | (Operators.CompareString(data.MetricQualifierID, string.Empty, false) == 0);
			if (flag)
			{
				data.MetricQualifierID = "NA";
			}
			sqlCommand.Parameters.Add(new SqlParameter("@MetricTypeID", data.MetricTypeID));
			sqlCommand.Parameters.Add(new SqlParameter("@MetricQualifierID", data.MetricQualifierID));
			sqlCommand.Parameters.Add(new SqlParameter("@CompositeInd", data.CompositeMetric));
			sqlCommand.Parameters.Add(new SqlParameter("@CompositeMethod", data.CompositeMethod));
			sqlCommand.Parameters.Add(new SqlParameter("@IncentiveShowAtTarget", data.IncentiveShowAtTarget));
			sqlCommand.Parameters.Add(new SqlParameter("@PrimaryDataProvider", data.PrimaryDataProvider));
			sqlCommand.Parameters.Add(new SqlParameter("@BackupDataProvider", data.BackupDataProvider));
			sqlCommand.Parameters.Add(new SqlParameter("@MetricOwnerUserID", data.MetricOwnerUserID));
			sqlCommand.Parameters.Add(new SqlParameter("@ManagedByID", data.ManagedByID));
			sqlCommand.Parameters.Add(new SqlParameter("@CommentNotRequired", data.CommentNotRequired));
			sqlCommand.Parameters.Add(new SqlParameter("@Incentive", data.IncentiveMeasure));
			return sqlCommand;
		}

		// Token: 0x06000089 RID: 137 RVA: 0x000054A0 File Offset: 0x000036A0
		private static int SetUPMMetrics(string operation, MetricDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSaveMetricsRequest(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x0600008A RID: 138 RVA: 0x0000553C File Offset: 0x0000373C
		public static List<MetricDTO> GetUPMMetrics(string pmContactID)
		{
			return PerfMgDB.GetUPMMetrics(0, pmContactID);
		}

		// Token: 0x0600008B RID: 139 RVA: 0x00005558 File Offset: 0x00003758
		public static List<MetricDTO> GetUPMMetrics(int C_ID)
		{
			return PerfMgDB.GetUPMMetrics(C_ID, string.Empty);
		}

		// Token: 0x0600008C RID: 140 RVA: 0x00005578 File Offset: 0x00003778
		public static string GetMetricID(int C_ID)
		{
			List<MetricDTO> upmmetrics = PerfMgDB.GetUPMMetrics(C_ID);
			bool flag = upmmetrics.Count == 1;
			string text;
			if (flag)
			{
				text = upmmetrics[0].MetricID;
			}
			else
			{
				text = string.Empty;
			}
			return text;
		}

		// Token: 0x0600008D RID: 141 RVA: 0x000055B8 File Offset: 0x000037B8
		public static string GetMetricInvScale(int C_ID)
		{
			List<MetricDTO> upmmetrics = PerfMgDB.GetUPMMetrics(C_ID);
			bool flag = upmmetrics.Count == 1;
			string text;
			if (flag)
			{
				text = upmmetrics[0].InverseScale;
			}
			else
			{
				text = string.Empty;
			}
			return text;
		}

		// Token: 0x0600008E RID: 142 RVA: 0x000055F8 File Offset: 0x000037F8
		public static List<MetricDTO> GetUPMMetrics()
		{
			return PerfMgDB.GetUPMMetrics(0, string.Empty);
		}

		// Token: 0x0600008F RID: 143 RVA: 0x00005618 File Offset: 0x00003818
		public static List<MetricDTO> GetUPMMetrics(bool active)
		{
			List<MetricDTO> list = new List<MetricDTO>();
			try
			{
				foreach (MetricDTO metricDTO in PerfMgDB.GetUPMMetrics(0, string.Empty))
				{
					bool active2 = metricDTO.Active;
					if (active2)
					{
						list.Add(metricDTO);
					}
				}
			}
			finally
			{
				List<MetricDTO>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			return list;
		}

		// Token: 0x06000090 RID: 144 RVA: 0x00005694 File Offset: 0x00003894
		public static List<MetricDTO> GetUPMMetricsByLevelID(int levelID)
		{
			List<MetricDTO> upmmetrics = PerfMgDB.GetUPMMetrics(true);
			List<MetricDTO> list = new List<MetricDTO>();
			try
			{
				foreach (MetricDTO metricDTO in upmmetrics)
				{
					bool flag = metricDTO.MetricLevelID == levelID;
					if (flag)
					{
						list.Add(metricDTO);
					}
				}
			}
			finally
			{
				List<MetricDTO>.Enumerator enumerator;
				((IDisposable)enumerator).Dispose();
			}
			return list;
		}

		// Token: 0x06000091 RID: 145 RVA: 0x00005710 File Offset: 0x00003910
		public static List<MetricDTO> GetUPMActiveMetrics()
		{
			return PerfMgDB.GetUPMMetricsActive();
		}

		// Token: 0x06000092 RID: 146 RVA: 0x00005728 File Offset: 0x00003928
		private static List<MetricDTO> GetUPMMetricsActive()
		{
			List<MetricDTO> list = new List<MetricDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_ActiveMetrics_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						PMContactID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						LexiconID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						InverseScale = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						CID = Conversions.ToInteger(sqlDataReader.GetValue(8)),
						Active = Conversions.ToBoolean(sqlDataReader.GetValue(9)),
						ConfidentialMeasure = Conversions.ToBoolean(sqlDataReader.GetValue(10)),
						MetricLevelID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)))),
						MetricTypeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12))),
						MetricQualifierID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						CompositeMetric = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))),
						CompositeMethod = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15)))),
						IncentiveShowAtTarget = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16))),
						PrimaryDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17))),
						BackupDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18))),
						MetricOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))),
						CommentNotRequired = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))),
						ManagedByID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21)))),
						ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(23))),
						IncentiveMeasure = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))),
						MetricID_Name = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(24)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000093 RID: 147 RVA: 0x00005A90 File Offset: 0x00003C90
		private static List<MetricDTO> GetUPMMetrics(int C_ID, string pmContactID)
		{
			List<MetricDTO> list = new List<MetricDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_Metrics_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(pmContactID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@PM_Contact_ID", pmContactID));
				}
				flag = C_ID > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@C_ID", C_ID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						PMContactID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						LexiconID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						InverseScale = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						CID = Conversions.ToInteger(sqlDataReader.GetValue(8)),
						Active = Conversions.ToBoolean(sqlDataReader.GetValue(9)),
						ConfidentialMeasure = Conversions.ToBoolean(sqlDataReader.GetValue(10)),
						MetricLevelID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)))),
						MetricTypeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12))),
						MetricQualifierID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						CompositeMetric = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))),
						CompositeMethod = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15)))),
						IncentiveShowAtTarget = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16))),
						PrimaryDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17))),
						BackupDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18))),
						MetricOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))),
						CommentNotRequired = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))),
						ManagedByID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21)))),
						ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))),
						IncentiveMeasure = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(23))),
						MetricID_Name = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(24)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000094 RID: 148 RVA: 0x00005E50 File Offset: 0x00004050
		public static List<MetricDTO> GetUPMMetricsByCP(string UserID)
		{
			List<MetricDTO> list = new List<MetricDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_MetricsByCP_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(UserID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", UserID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						PMContactID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						LexiconID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						InverseScale = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						CID = Conversions.ToInteger(sqlDataReader.GetValue(8)),
						Active = Conversions.ToBoolean(sqlDataReader.GetValue(9)),
						ConfidentialMeasure = Conversions.ToBoolean(sqlDataReader.GetValue(10)),
						MetricLevelID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)))),
						MetricTypeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12))),
						MetricQualifierID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						CompositeMetric = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))),
						CompositeMethod = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15)))),
						IncentiveShowAtTarget = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16))),
						PrimaryDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17))),
						BackupDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18))),
						MetricOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))),
						CommentNotRequired = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))),
						ManagedByID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21)))),
						ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))),
						IncentiveMeasure = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(23))),
						MetricID_Name = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(24))),
						CommentProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(25)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000095 RID: 149 RVA: 0x00006204 File Offset: 0x00004404
		public static List<MetricDTO> GetUPMMetricsByUserRole(string UserID)
		{
			List<MetricDTO> list = new List<MetricDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_MetricsByUserRole_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(UserID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", UserID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricDTO
					{
						CID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						MetricID = Conversions.ToString(sqlDataReader.GetValue(2)),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						PMContactID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						LexiconID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						InverseScale = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						Active = Conversions.ToBoolean(sqlDataReader.GetValue(10)),
						ConfidentialMeasure = Conversions.ToBoolean(sqlDataReader.GetValue(11)),
						MetricLevelID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)))),
						MetricTypeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						MetricQualifierID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))),
						CompositeMetric = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15))),
						CompositeMethod = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16)))),
						IncentiveMeasure = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17))),
						IncentiveShowAtTarget = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18))),
						PrimaryDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))),
						BackupDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))),
						CommentNotRequired = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21))),
						MetricOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))),
						ManagedByID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(23)))),
						CommentProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(24)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000096 RID: 150 RVA: 0x00006584 File Offset: 0x00004784
		public static List<MetricDTO> GetUPMMetricsByDPCPUserRole(string UserID)
		{
			List<MetricDTO> list = new List<MetricDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_MetricsByDPCPUserRole_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(UserID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", UserID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricDTO
					{
						CID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						MetricID = Conversions.ToString(sqlDataReader.GetValue(2)),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						PMContactID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						LexiconID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						InverseScale = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						Active = Conversions.ToBoolean(sqlDataReader.GetValue(10)),
						ConfidentialMeasure = Conversions.ToBoolean(sqlDataReader.GetValue(11)),
						MetricLevelID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)))),
						MetricTypeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						MetricQualifierID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))),
						CompositeMetric = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15))),
						CompositeMethod = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16)))),
						IncentiveMeasure = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17))),
						IncentiveShowAtTarget = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18))),
						PrimaryDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))),
						BackupDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))),
						CommentNotRequired = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21))),
						MetricOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))),
						ManagedByID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(23)))),
						CommentProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(24)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000097 RID: 151 RVA: 0x00006904 File Offset: 0x00004B04
		public static List<MetricDTO> GetUPMMetricsByDPBDPUserRole(string UserID)
		{
			List<MetricDTO> list = new List<MetricDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_MetricsByDPBDPUserRole_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(UserID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", UserID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricDTO
					{
						CID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						MetricID = Conversions.ToString(sqlDataReader.GetValue(2)),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						PMContactID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						LexiconID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						InverseScale = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						Active = Conversions.ToBoolean(sqlDataReader.GetValue(10)),
						ConfidentialMeasure = Conversions.ToBoolean(sqlDataReader.GetValue(11)),
						MetricLevelID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)))),
						MetricTypeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						MetricQualifierID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))),
						CompositeMetric = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15))),
						CompositeMethod = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16)))),
						IncentiveMeasure = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17))),
						IncentiveShowAtTarget = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18))),
						PrimaryDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))),
						BackupDataProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))),
						CommentNotRequired = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21))),
						MetricOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))),
						ManagedByID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(23)))),
						CommentProvider = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(24)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000098 RID: 152 RVA: 0x00006C84 File Offset: 0x00004E84
		public static List<MetricDTO> GetMyMetrics(string userID)
		{
			List<MetricDTO> list = new List<MetricDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select\tDistinct a.C_ID,        a.Chart_Name,        a.MetricOwnerUserID,        a.Inverse_Scale,        b.FormatID,        a.PM_Contact_ID,        a.Chart_ID From\tt_UPM_Charts as a Join t_UPM_Data_Series as b On a.C_ID = b.C_ID and b.Description = 'YTD'        Left Join dbo.t_web_UserDashboardCharts as c On a.C_ID = c.C_ID        Left Join dbo.t_web_UserDashboardSharing as d On c.DashboardName = d.DashboardName and c.UserID = d.UserID Where\ta.PM_Contact_ID = 'EXT' and (a.Analyst = @userID or d.ShareUserID = @userID) ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@UserID", userID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricDTO
					{
						CID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						InverseScale = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						FormatID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						PMContactID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						ChartID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						MetricOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000099 RID: 153 RVA: 0x00006E34 File Offset: 0x00005034
		public static bool IsMetricIDUnique(string metricID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_upm_charts where Chart_ID = @metricID ";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@metricID", metricID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x0600009A RID: 154 RVA: 0x00006F08 File Offset: 0x00005108
		public static bool IsMetricIDUniqueNonActive(string metricID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_upm_charts where Chart_ID = @metricID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@metricID", metricID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x0600009B RID: 155 RVA: 0x00006FDC File Offset: 0x000051DC
		public static bool IsLexiconDescUniqueOnEdit(string lexdesc, int lexID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_upm_lexicons where kpidescription = @Name and lexiconID <> @lexID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Name", lexdesc),
						new SqlParameter("@lexID", lexID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x0600009C RID: 156 RVA: 0x000070CC File Offset: 0x000052CC
		public static bool IsLexiconDescUnique(string lexdesc)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_upm_lexicons where kpidescription = @Name and Active = 1";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Name", lexdesc)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x0600009D RID: 157 RVA: 0x000071A0 File Offset: 0x000053A0
		public static bool IsSCNameUnique(string ScName)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_upm_scorecards where scorecardname = @Name and Active = 1";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Name", ScName)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x0600009E RID: 158 RVA: 0x00007274 File Offset: 0x00005474
		public static bool IsMetricNameUnique(string MetricName)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_upm_charts where Chart_Name = @Name and Active = 1";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Name", MetricName)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x0600009F RID: 159 RVA: 0x00007348 File Offset: 0x00005548
		public static bool IsMetricNameUniqueNonActive(string MetricName)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_upm_charts where Chart_Name = @Name";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Name", MetricName)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x0000741C File Offset: 0x0000561C
		public static bool IsMetricNameUniqueEDIT(string MetricName)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_upm_charts where Chart_Name = @Name";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Name", MetricName)
					}
				}.ExecuteScalar());
				bool flag = num > 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x000074EC File Offset: 0x000056EC
		public static bool IsUserBackupDPInOtherMetrics(string userID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_UPM_Charts where BackupDataProvider = @userID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@userID", userID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = true;
				}
				else
				{
					flag2 = false;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x000075C0 File Offset: 0x000057C0
		public static bool IsUserDataPInOtherMetrics(string userID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_UPM_Charts where PrimaryDataProvider = @userID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@userID", userID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = true;
				}
				else
				{
					flag2 = false;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00007694 File Offset: 0x00005894
		public static bool IsUserDPInOtherMetrics(string userID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_UPM_Charts where (PrimaryDataProvider = @userID or BackupDataProvider = @userID)";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@userID", userID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = true;
				}
				else
				{
					flag2 = false;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x00007768 File Offset: 0x00005968
		public static bool IsUserDataProvider(int cID, string userID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_UPM_Charts where c_ID = @cID and (PrimaryDataProvider = @userID or BackupDataProvider = @userID)";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@cID", cID),
						new SqlParameter("@userID", userID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = true;
				}
				else
				{
					flag2 = false;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x00007858 File Offset: 0x00005A58
		public static bool IsUserCommentProvider(int cID, string userID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_UPM_ChartCommentProviders where c_ID = @cID and userID = @userID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@cID", cID),
						new SqlParameter("@userID", userID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = true;
				}
				else
				{
					flag2 = false;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x00007948 File Offset: 0x00005B48
		public static bool IsUserCPForOtherMetrics(string userID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_UPM_ChartCommentProviders where userID = @userID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@userID", userID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = true;
				}
				else
				{
					flag2 = false;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x00007A1C File Offset: 0x00005C1C
		public static bool IsCommentProviderUnique(int cID, string userID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_UPM_ChartCommentProviders where c_ID = @cID and userID = @userID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@cID", cID),
						new SqlParameter("@userID", userID)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x00007B0C File Offset: 0x00005D0C
		public static bool IsUserInSecurityGroup(string userID, string groupid)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "Select Count(*) From t_Security_UserGroups where userID = @userid and groupID = @groupID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@userid", userID),
						new SqlParameter("@groupID", groupid)
					}
				}.ExecuteScalar());
				bool flag = num >= 1;
				if (flag)
				{
					flag2 = true;
				}
				else
				{
					flag2 = false;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x060000A9 RID: 169 RVA: 0x00007BF4 File Offset: 0x00005DF4
		public static MetricDTO GetMetricNameByChartID(string ChartID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			MetricDTO metric;
			try
			{
				sqlConnection.Open();
				string text = "Select Chart_Name From t_upm_charts where Chart_ID = @ChartID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@ChartID", ChartID)
					}
				}.ExecuteScalar());
				metric = PerfMgDB.GetMetric(num);
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return metric;
		}

		// Token: 0x060000AA RID: 170 RVA: 0x00007CB8 File Offset: 0x00005EB8
		public static MetricDTO GetMetricIDByMetricName(string metricname)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			MetricDTO metric;
			try
			{
				sqlConnection.Open();
				string text = "Select Chart_ID From t_upm_charts where Chart_Name = @MetricName";
				string text2 = Conversions.ToString(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@MetricName", metricname)
					}
				}.ExecuteScalar());
				metric = PerfMgDB.GetMetric(text2);
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return metric;
		}

		// Token: 0x060000AB RID: 171 RVA: 0x00007D7C File Offset: 0x00005F7C
		public static MetricDTO GetCIDByMetricName(string metricname)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			MetricDTO metric;
			try
			{
				sqlConnection.Open();
				string text = "Select C_ID From t_upm_charts where Chart_Name = @MetricName";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@MetricName", metricname)
					}
				}.ExecuteScalar());
				metric = PerfMgDB.GetMetric(num);
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return metric;
		}

		// Token: 0x060000AC RID: 172 RVA: 0x00007E40 File Offset: 0x00006040
		public static MetricDTO GetMetric(string chartID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			MetricDTO metric;
			try
			{
				sqlConnection.Open();
				string text = "Select C_ID From t_upm_charts where chart_ID = @ChartID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@ChartID", chartID)
					}
				}.ExecuteScalar());
				metric = PerfMgDB.GetMetric(num);
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return metric;
		}

		// Token: 0x060000AD RID: 173 RVA: 0x00007F04 File Offset: 0x00006104
		public static MetricDTO GetMetric(int cID)
		{
			List<MetricDTO> upmmetrics = PerfMgDB.GetUPMMetrics(cID);
			bool flag = upmmetrics.Count == 1;
			MetricDTO metricDTO;
			if (flag)
			{
				metricDTO = upmmetrics[0];
			}
			else
			{
				metricDTO = null;
			}
			return metricDTO;
		}

		// Token: 0x060000AE RID: 174 RVA: 0x00007F3C File Offset: 0x0000613C
		public static string GetPerformanceLevel(decimal min, decimal tar, decimal max, decimal actual, string inverseScale)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			string text2;
			try
			{
				sqlConnection.Open();
				string text = "Select dbo.udf_PerfLevel(@min,@tar,@max,@act,@inv)";
				text2 = Conversions.ToString(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@min", min),
						new SqlParameter("@tar", tar),
						new SqlParameter("@max", max),
						new SqlParameter("@act", actual),
						new SqlParameter("@inv", inverseScale)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return text2;
		}

		// Token: 0x060000AF RID: 175 RVA: 0x00008068 File Offset: 0x00006268
		public static bool IsMonthly(int cID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag3;
			try
			{
				sqlConnection.Open();
				string text = "select  Count(*) From dbo.t_upm_data_series  where \tc_id = @CID and Description in ('Monthly','Monthly Minimum','Monthly Target','Monthly Maximum') ";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@CID", cID)
					}
				}.ExecuteScalar());
				bool flag = num == 4;
				bool flag2 = flag;
				flag3 = flag2;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag3;
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x00008140 File Offset: 0x00006340
		public static bool IsValidMetric(string ChartID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag3;
			try
			{
				sqlConnection.Open();
				string text = "select count(*) from dbo.t_upm_charts where chart_id = @ChartID";
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@ChartID", ChartID)
					}
				}.ExecuteScalar());
				bool flag = num == 1;
				bool flag2 = flag;
				flag3 = flag2;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag3;
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x00008214 File Offset: 0x00006414
		public static List<int> GetUPMMetricCompositeCalcOrder()
		{
			List<int> list = new List<int>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<int> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricsCompositeCalcOrder_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(Conversions.ToInteger(sqlDataReader.GetValue(0)));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000B2 RID: 178 RVA: 0x000082E0 File Offset: 0x000064E0
		public static List<MetricCompositesDTO> GetUPMMetricComposites(int cID)
		{
			List<MetricCompositesDTO> list = new List<MetricCompositesDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricCompositesDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricsComposite_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@C_ID", cID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricCompositesDTO
					{
						CID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						MadeOfCID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						Weight = Conversions.ToDecimal(sqlDataReader.GetValue(2)),
						Sort = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						ChartName = Conversions.ToString(sqlDataReader.GetValue(4))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000B3 RID: 179 RVA: 0x0000220E File Offset: 0x0000040E
		public static void DeleteUPMMetricComposites(MetricCompositesDTO data)
		{
			PerfMgDB.SetUPMMetricComposites("D", data);
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x0000221E File Offset: 0x0000041E
		public static void SaveUPMMetricComposites(MetricCompositesDTO data)
		{
			PerfMgDB.SetUPMMetricComposites("S", data);
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x0000221E File Offset: 0x0000041E
		public static void UpdateUPMMetricComposites(MetricCompositesDTO data)
		{
			PerfMgDB.SetUPMMetricComposites("S", data);
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x00008434 File Offset: 0x00006634
		internal static SqlCommand CreateUPMMetricCompositeSaveRequest(string operation, MetricCompositesDTO data)
		{
			return new SqlCommand("dbo.usp_upm_MetricsComposite_set")
			{
				CommandType = CommandType.StoredProcedure,
				Parameters = 
				{
					new SqlParameter("@Operation", operation),
					new SqlParameter("@C_ID", data.CID),
					new SqlParameter("@MadeOf_C_ID", data.MadeOfCID),
					new SqlParameter("@Weight", data.Weight),
					new SqlParameter("@Sort", data.Sort)
				}
			};
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x000084F8 File Offset: 0x000066F8
		private static void SetUPMMetricComposites(string operation, MetricCompositesDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateUPMMetricCompositeSaveRequest(operation, data);
				sqlCommand.Connection = sqlConnection;
				sqlCommand.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x00008588 File Offset: 0x00006788
		public static List<UPMCompositeMethodDTO> GetUPMCompositeMethods()
		{
			List<UPMCompositeMethodDTO> list = new List<UPMCompositeMethodDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMCompositeMethodDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_CompositeMethods_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new UPMCompositeMethodDTO
					{
						MethodID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						Method = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00008678 File Offset: 0x00006878
		public static decimal Get0to200Scale(decimal min, decimal target, decimal max, decimal actual, string inverse)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			decimal num;
			try
			{
				sqlConnection.Open();
				string text = "Select dbo.udf_Zero_200_Score_numeric(@min,@tar,@max,@ytd,@inverse)";
				num = Conversions.ToDecimal(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@min", min),
						new SqlParameter("@tar", target),
						new SqlParameter("@max", max),
						new SqlParameter("@ytd", actual),
						new SqlParameter("@inverse", inverse)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000BA RID: 186 RVA: 0x000087A4 File Offset: 0x000069A4
		public static decimal Get0to200Scale(int cID, string month, int year, string ytd_monthly)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			decimal num;
			try
			{
				sqlConnection.Open();
				string text = "Select dbo.udf_Zero_200_Score_ByChart(@cID,@year,@month,@ytd_monthly)";
				num = Conversions.ToDecimal(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@cID", cID),
						new SqlParameter("@year", year),
						new SqlParameter("@month", month),
						new SqlParameter("@ytd_monthly", ytd_monthly)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000BB RID: 187 RVA: 0x000088AC File Offset: 0x00006AAC
		public static List<MetricCompositeDetailDTO> GetUPMMetricCompositeDetailParent(int cID, string year)
		{
			return PerfMgDB.GetUPMMetricCompositeDetail(cID, 0, string.Empty, year);
		}

		// Token: 0x060000BC RID: 188 RVA: 0x000088CC File Offset: 0x00006ACC
		public static List<MetricCompositeDetailDTO> GetUPMMetricCompositeDetailChildren(int parentCID, string year)
		{
			return PerfMgDB.GetUPMMetricCompositeDetail(-1, parentCID, string.Empty, year);
		}

		// Token: 0x060000BD RID: 189 RVA: 0x000088EC File Offset: 0x00006AEC
		public static List<MetricCompositeDetailDTO> GetUPMMetricCompositeDetailParent(int cID, string month, string year)
		{
			return PerfMgDB.GetUPMMetricCompositeDetail(cID, 0, month, year);
		}

		// Token: 0x060000BE RID: 190 RVA: 0x00008908 File Offset: 0x00006B08
		public static List<MetricCompositeDetailDTO> GetUPMMetricCompositeDetailChildren(int parentCID, string month, string year)
		{
			return PerfMgDB.GetUPMMetricCompositeDetail(-1, parentCID, month, year);
		}

		// Token: 0x060000BF RID: 191 RVA: 0x00008924 File Offset: 0x00006B24
		public static List<MetricCompositeDetailDTO> GetUPMMetricCompositeDetail(int cID, int parentCID, string month, string year)
		{
			List<MetricCompositeDetailDTO> list = new List<MetricCompositeDetailDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricCompositeDetailDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricsCompositeDetail_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = cID > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@C_ID", cID));
				}
				flag = parentCID >= 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@Parent_C_ID", parentCID));
				}
				flag = Operators.CompareString(month, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@ReportingMonth", month));
				}
				sqlCommand.Parameters.Add(new SqlParameter("@ReportingYear", year));
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricCompositeDetailDTO
					{
						CID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ChartName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ReportingMonth = Conversions.ToString(sqlDataReader.GetValue(2)),
						ReportingYear = Conversions.ToInteger(sqlDataReader.GetValue(3)),
						ParentCID = Conversions.ToInteger(sqlDataReader.GetValue(4)),
						ActualValue = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						Minimum = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						Target = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						Maximum = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						PerformanceLevel = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						Weight = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10))),
						Score = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11))),
						WeightedScore = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12))),
						MonthSort = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13)))),
						ParentChartName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))),
						YTDorMonthly = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15))),
						ActualFormatted = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16))),
						MinimumFormatted = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17))),
						TargetFormatted = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18))),
						MaximumFormatted = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))),
						ScoreFormatted = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))),
						WeightedScoreFormatted = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21))),
						CompositeMethod = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000C0 RID: 192 RVA: 0x0000222E File Offset: 0x0000042E
		public static void DeleteUPMMetricCompositeDetail(MetricCompositeDetailDTO data)
		{
			PerfMgDB.SetUPMMetricCompositeDetail("D", data);
		}

		// Token: 0x060000C1 RID: 193 RVA: 0x0000223E File Offset: 0x0000043E
		public static void SaveUPMMetricCompositeDetail(MetricCompositeDetailDTO data)
		{
			PerfMgDB.SetUPMMetricCompositeDetail("S", data);
		}

		// Token: 0x060000C2 RID: 194 RVA: 0x00008CE4 File Offset: 0x00006EE4
		private static void SetUPMMetricCompositeDetail(string operation, MetricCompositeDetailDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ChartsCompositeDetail_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@C_ID", data.CID),
						new SqlParameter("@ReportingMonth", data.ReportingMonth),
						new SqlParameter("@ReportingYear", data.ReportingYear),
						new SqlParameter("@Parent_C_ID", data.ParentCID),
						new SqlParameter("@Actual", RuntimeHelpers.GetObjectValue(DBNullConversions.NothingToDBNull(data.ActualValue))),
						new SqlParameter("@Minimum", RuntimeHelpers.GetObjectValue(DBNullConversions.NothingToDBNull(data.Minimum))),
						new SqlParameter("@Target", RuntimeHelpers.GetObjectValue(DBNullConversions.NothingToDBNull(data.Target))),
						new SqlParameter("@Maximum", RuntimeHelpers.GetObjectValue(DBNullConversions.NothingToDBNull(data.Maximum))),
						new SqlParameter("@Level", data.PerformanceLevel),
						new SqlParameter("@Weight", data.Weight),
						new SqlParameter("@Score", data.Score),
						new SqlParameter("@WeightedScore", data.WeightedScore),
						new SqlParameter("@YTD_Monthly", data.YTDorMonthly),
						new SqlParameter("@Sort", data.DetailSort)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000C3 RID: 195 RVA: 0x00008F94 File Offset: 0x00007194
		public static List<string> GetUPMMetricsGroupName()
		{
			List<string> list = new List<string>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<string> list2;
			try
			{
				sqlConnection.Open();
				string text = "usp_upm_MetricsGroupName_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000C4 RID: 196 RVA: 0x00009064 File Offset: 0x00007264
		public static List<UPMMetricGroupDTO> GetUPMMetricsGroup(string name)
		{
			List<UPMMetricGroupDTO> list = new List<UPMMetricGroupDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMMetricGroupDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "usp_upm_MetricsGroup_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@GroupName", name)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new UPMMetricGroupDTO
					{
						CID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						ChartID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						GroupName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000C5 RID: 197 RVA: 0x00009194 File Offset: 0x00007394
		public static void DeleteUPMMetricGroup(string name)
		{
			PerfMgDB.SetUPMMetricsGroup("D", new UPMMetricGroupDTO
			{
				GroupName = name
			});
		}

		// Token: 0x060000C6 RID: 198 RVA: 0x0000224E File Offset: 0x0000044E
		public static void SaveUPMMetricsGroup(UPMMetricGroupDTO data)
		{
			PerfMgDB.SetUPMMetricsGroup("S", data);
		}

		// Token: 0x060000C7 RID: 199 RVA: 0x000091C0 File Offset: 0x000073C0
		private static void SetUPMMetricsGroup(string operation, UPMMetricGroupDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricsGroup_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@C_ID", data.CID),
						new SqlParameter("@GroupName", data.GroupName),
						new SqlParameter("@Chart_ID", data.ChartID),
						new SqlParameter("@OrderSeq", data.Order)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000C8 RID: 200 RVA: 0x000092EC File Offset: 0x000074EC
		public static List<int> GetConfidentialMeasures()
		{
			List<int> list = new List<int>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<int> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select C_ID from t_upm_charts where active = 1 and confidentialMeasure = 1";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(Conversions.ToInteger(sqlDataReader.GetValue(0)));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000C9 RID: 201 RVA: 0x000093B8 File Offset: 0x000075B8
		public static void DeleteMetricCPWhereZero()
		{
			List<int> list = new List<int>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "Delete from t_upm_ChartCommentProviders where C_ID = 0 ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(Conversions.ToInteger(sqlDataReader.GetValue(0)));
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000CA RID: 202 RVA: 0x0000225E File Offset: 0x0000045E
		public static void DeleteUPMMetricCommentProvider(MetricCommentProviderDTO data)
		{
			PerfMgDB.SetUPMMetricCommentProvider("D", data);
		}

		// Token: 0x060000CB RID: 203 RVA: 0x0000226E File Offset: 0x0000046E
		public static void SaveUPMMetricCommentProvider(MetricCommentProviderDTO data)
		{
			PerfMgDB.SetUPMMetricCommentProvider("S", data);
		}

		// Token: 0x060000CC RID: 204 RVA: 0x0000947C File Offset: 0x0000767C
		private static void SetUPMMetricCommentProvider(string operation, MetricCommentProviderDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ChartCommentProviders_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@C_ID", data.CID),
						new SqlParameter("@UserID", data.UserID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000CD RID: 205 RVA: 0x00009568 File Offset: 0x00007768
		public static List<MetricCommentProviderDTO> GetUPMMetricCommentProvider(int CID)
		{
			return PerfMgDB.GetUPMMetricCommentProvider(CID, string.Empty);
		}

		// Token: 0x060000CE RID: 206 RVA: 0x00009588 File Offset: 0x00007788
		public static List<MetricCommentProviderDTO> GetUPMMetricCommentProvider(string userID)
		{
			return PerfMgDB.GetUPMMetricCommentProvider(-1, userID);
		}

		// Token: 0x060000CF RID: 207 RVA: 0x000095A4 File Offset: 0x000077A4
		private static List<MetricCommentProviderDTO> GetUPMMetricCommentProvider(int C_ID, string userID)
		{
			List<MetricCommentProviderDTO> list = new List<MetricCommentProviderDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricCommentProviderDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_MetricCommentProviders_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(userID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", userID));
				}
				flag = C_ID > -1;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@C_ID", C_ID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricCommentProviderDTO
					{
						CID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						UserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000D0 RID: 208 RVA: 0x0000227E File Offset: 0x0000047E
		public static void DeleteProviderNotInOrg(ProviderNotInOrgDTO data)
		{
			PerfMgDB.SetProviderNotInOrg("D", data);
		}

		// Token: 0x060000D1 RID: 209 RVA: 0x0000228E File Offset: 0x0000048E
		public static void SaveProviderNotInOrg(ProviderNotInOrgDTO data)
		{
			PerfMgDB.SetProviderNotInOrg("S", data);
		}

		// Token: 0x060000D2 RID: 210 RVA: 0x000096F0 File Offset: 0x000078F0
		private static void SetProviderNotInOrg(string operation, ProviderNotInOrgDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ProvidersNotInOrg_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@UserID", data.UserID),
						new SqlParameter("@Name", data.Name),
						new SqlParameter("@ManagerUserID", data.ManagerUserID),
						new SqlParameter("@ManagerName", data.ManagerName)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000D3 RID: 211 RVA: 0x00009810 File Offset: 0x00007A10
		public static List<ProviderNotInOrgDTO> GetProviderNotInOrg()
		{
			return PerfMgDB.GetProviderNotInOrg(string.Empty);
		}

		// Token: 0x060000D4 RID: 212 RVA: 0x0000982C File Offset: 0x00007A2C
		public static List<ProviderNotInOrgDTO> GetProviderNotInOrg(string userID)
		{
			List<ProviderNotInOrgDTO> list = new List<ProviderNotInOrgDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ProviderNotInOrgDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_ProvidersNotInOrg_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(userID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", userID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ProviderNotInOrgDTO
					{
						UserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						Name = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ManagerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						ManagerName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000D5 RID: 213 RVA: 0x00009988 File Offset: 0x00007B88
		public static List<UPMPointsDTO> GetUPMDataSeriesPointsByMonths(int cID, int reportingyear)
		{
			List<UPMPointsDTO> list = new List<UPMPointsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMPointsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_MetricDSPoints_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@C_ID", cID),
						new SqlParameter("@Reporting_Year", reportingyear)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					UPMPointsDTO upmpointsDTO = new UPMPointsDTO();
					UPMPointsDTO upmpointsDTO2 = upmpointsDTO;
					object value = sqlDataReader.GetValue(1);
					int? num;
					upmpointsDTO2.DSID = ((value != null) ? ((int?)value) : num);
					upmpointsDTO.CID = Conversions.ToInteger(sqlDataReader.GetValue(2));
					upmpointsDTO.MetricID = Conversions.ToString(sqlDataReader.GetValue(3));
					UPMPointsDTO upmpointsDTO3 = upmpointsDTO;
					object value2 = sqlDataReader.GetValue(4);
					upmpointsDTO3.DataSeries = ((value2 != null) ? ((int?)value2) : num);
					upmpointsDTO.dsDescription = Conversions.ToString(sqlDataReader.GetValue(5));
					bool flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)));
					decimal? num2;
					if (flag)
					{
						UPMPointsDTO upmpointsDTO4 = upmpointsDTO;
						object value3 = sqlDataReader.GetValue(6);
						upmpointsDTO4.JANPoints = ((value3 != null) ? ((decimal?)value3) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO5 = upmpointsDTO;
						object value4 = sqlDataReader.GetValue(7);
						upmpointsDTO5.FEBPoints = ((value4 != null) ? ((decimal?)value4) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO6 = upmpointsDTO;
						object value5 = sqlDataReader.GetValue(8);
						upmpointsDTO6.MARPoints = ((value5 != null) ? ((decimal?)value5) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO7 = upmpointsDTO;
						object value6 = sqlDataReader.GetValue(9);
						upmpointsDTO7.APRPoints = ((value6 != null) ? ((decimal?)value6) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO8 = upmpointsDTO;
						object value7 = sqlDataReader.GetValue(10);
						upmpointsDTO8.MAYPoints = ((value7 != null) ? ((decimal?)value7) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO9 = upmpointsDTO;
						object value8 = sqlDataReader.GetValue(11);
						upmpointsDTO9.JUNPoints = ((value8 != null) ? ((decimal?)value8) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO10 = upmpointsDTO;
						object value9 = sqlDataReader.GetValue(12);
						upmpointsDTO10.JULPoints = ((value9 != null) ? ((decimal?)value9) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO11 = upmpointsDTO;
						object value10 = sqlDataReader.GetValue(13);
						upmpointsDTO11.AUGPoints = ((value10 != null) ? ((decimal?)value10) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO12 = upmpointsDTO;
						object value11 = sqlDataReader.GetValue(14);
						upmpointsDTO12.SEPPoints = ((value11 != null) ? ((decimal?)value11) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO13 = upmpointsDTO;
						object value12 = sqlDataReader.GetValue(15);
						upmpointsDTO13.OCTPoints = ((value12 != null) ? ((decimal?)value12) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO14 = upmpointsDTO;
						object value13 = sqlDataReader.GetValue(16);
						upmpointsDTO14.NOVPoints = ((value13 != null) ? ((decimal?)value13) : num2);
					}
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO15 = upmpointsDTO;
						object value14 = sqlDataReader.GetValue(17);
						upmpointsDTO15.DECPoints = ((value14 != null) ? ((decimal?)value14) : num2);
					}
					upmpointsDTO.JANMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18)));
					upmpointsDTO.JANMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))));
					upmpointsDTO.JANReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))));
					upmpointsDTO.FEBMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21)));
					upmpointsDTO.FEBMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))));
					upmpointsDTO.FEBReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(23))));
					upmpointsDTO.MARMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(24)));
					upmpointsDTO.MARMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(25))));
					upmpointsDTO.MARReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(26))));
					upmpointsDTO.APRMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(27)));
					upmpointsDTO.APRMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(28))));
					upmpointsDTO.APRReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(29))));
					upmpointsDTO.MayMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(30)));
					upmpointsDTO.MayMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(31))));
					upmpointsDTO.MayReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(32))));
					upmpointsDTO.JunMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(33)));
					upmpointsDTO.JunMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(34))));
					upmpointsDTO.JunReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(35))));
					upmpointsDTO.JulMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(36)));
					upmpointsDTO.JULMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(37))));
					upmpointsDTO.JULReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(38))));
					upmpointsDTO.AUGMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(39)));
					upmpointsDTO.AUGMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(40))));
					upmpointsDTO.AUGReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(41))));
					upmpointsDTO.SEPMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(42)));
					upmpointsDTO.SEPMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(43))));
					upmpointsDTO.SEPReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(44))));
					upmpointsDTO.OCTMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(45)));
					upmpointsDTO.OCTMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(46))));
					upmpointsDTO.OCTReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(47))));
					upmpointsDTO.NOVMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(48)));
					upmpointsDTO.NOVMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(49))));
					upmpointsDTO.NOVReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(50))));
					upmpointsDTO.DECMonDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(51)));
					upmpointsDTO.DECMonthValue = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(52))));
					upmpointsDTO.DECReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(53))));
					list.Add(upmpointsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000D6 RID: 214 RVA: 0x0000A1E8 File Offset: 0x000083E8
		public static List<UPMPointsDTO> GetUPMDataSeriesByMonth(int cID, int reportingyear, int month)
		{
			List<UPMPointsDTO> list = new List<UPMPointsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMPointsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_DS_wMonth_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@C_ID", cID),
						new SqlParameter("@Reporting_Year", reportingyear),
						new SqlParameter("@Month", month)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					UPMPointsDTO upmpointsDTO = new UPMPointsDTO();
					UPMPointsDTO upmpointsDTO2 = upmpointsDTO;
					object value = sqlDataReader.GetValue(0);
					int? num;
					upmpointsDTO2.DSID = ((value != null) ? ((int?)value) : num);
					upmpointsDTO.CID = Conversions.ToInteger(sqlDataReader.GetValue(1));
					upmpointsDTO.MetricID = Conversions.ToString(sqlDataReader.GetValue(2));
					UPMPointsDTO upmpointsDTO3 = upmpointsDTO;
					object value2 = sqlDataReader.GetValue(3);
					upmpointsDTO3.DataSeries = ((value2 != null) ? ((int?)value2) : num);
					upmpointsDTO.dsDescription = Conversions.ToString(sqlDataReader.GetValue(4));
					upmpointsDTO.CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					upmpointsDTO.ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)));
					upmpointsDTO.ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)));
					upmpointsDTO.FormatID = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))));
					upmpointsDTO.ShowOnTrend = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)));
					upmpointsDTO.ShowAsLine = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					upmpointsDTO.ShowAsStackBar = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)));
					upmpointsDTO.Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)));
					upmpointsDTO.MonthDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13)));
					bool flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO4 = upmpointsDTO;
						object value3 = sqlDataReader.GetValue(14);
						decimal? num2;
						upmpointsDTO4.YValue = ((value3 != null) ? ((decimal?)value3) : num2);
					}
					upmpointsDTO.ReportingYear = Conversions.ToString(sqlDataReader.GetValue(15));
					UPMPointsDTO upmpointsDTO5 = upmpointsDTO;
					object value4 = sqlDataReader.GetValue(16);
					upmpointsDTO5.month = ((value4 != null) ? ((int?)value4) : num);
					upmpointsDTO.CreateDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17)));
					list.Add(upmpointsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000D7 RID: 215 RVA: 0x0000A50C File Offset: 0x0000870C
		public static List<DataSeriesDTO> GetUPMDataSeries(int cID)
		{
			List<DataSeriesDTO> list = new List<DataSeriesDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<DataSeriesDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_Data_Series_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@C_ID", cID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					DataSeriesDTO dataSeriesDTO = new DataSeriesDTO();
					DataSeriesDTO dataSeriesDTO2 = dataSeriesDTO;
					object value = sqlDataReader.GetValue(0);
					int? num;
					dataSeriesDTO2.DSID = ((value != null) ? ((int?)value) : num);
					dataSeriesDTO.CID = Conversions.ToInteger(sqlDataReader.GetValue(1));
					dataSeriesDTO.MetricID = Conversions.ToString(sqlDataReader.GetValue(2));
					DataSeriesDTO dataSeriesDTO3 = dataSeriesDTO;
					object value2 = sqlDataReader.GetValue(3);
					dataSeriesDTO3.DataSeries = ((value2 != null) ? ((int?)value2) : num);
					dataSeriesDTO.Description = Conversions.ToString(sqlDataReader.GetValue(4));
					dataSeriesDTO.CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					dataSeriesDTO.ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)));
					dataSeriesDTO.ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)));
					dataSeriesDTO.FormatID = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))));
					dataSeriesDTO.ShowOnTrend = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)));
					dataSeriesDTO.ShowAsLine = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					dataSeriesDTO.ShowAsStackBar = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)));
					dataSeriesDTO.Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)));
					list.Add(dataSeriesDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000D8 RID: 216 RVA: 0x0000A754 File Offset: 0x00008954
		public static int SaveUPMDataSeries(DataSeriesDTO data)
		{
			return PerfMgDB.SetUPMDataSeries("S", data);
		}

		// Token: 0x060000D9 RID: 217 RVA: 0x0000A774 File Offset: 0x00008974
		public static int DeleteUPMDataSeries(DataSeriesDTO data)
		{
			return PerfMgDB.SetUPMDataSeries("D", data);
		}

		// Token: 0x060000DA RID: 218 RVA: 0x0000A794 File Offset: 0x00008994
		internal static SqlCommand CreateSaveDataSeriesRequest(string operation, DataSeriesDTO data)
		{
			return new SqlCommand("dbo.usp_UPM_Data_Series_set")
			{
				CommandType = CommandType.StoredProcedure,
				Parameters = 
				{
					new SqlParameter("@Operation", operation),
					new SqlParameter("@DS_ID", data.DSID),
					new SqlParameter("@C_ID", data.CID),
					new SqlParameter("@Data_Series", data.DataSeries),
					new SqlParameter("@Description", data.Description),
					new SqlParameter("@UserID", Environment.UserName),
					new SqlParameter("@FormatID", data.FormatID),
					new SqlParameter("@ShowOnTrend", data.ShowOnTrend),
					new SqlParameter("@ShowAsLine", data.ShowAsLine),
					new SqlParameter("@ShowAsStackBar", data.ShowAsStackBar),
					new SqlParameter("@Active", data.Active)
				}
			};
		}

		// Token: 0x060000DB RID: 219 RVA: 0x0000A910 File Offset: 0x00008B10
		private static int SetUPMDataSeries(string operation, DataSeriesDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSaveDataSeriesRequest(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000DC RID: 220 RVA: 0x0000A9AC File Offset: 0x00008BAC
		public static List<DataSeriesDescriptionDTO> GetDataSeriesDescription()
		{
			return PerfMgDB.GetDataSeriesDescriptionDB(string.Empty);
		}

		// Token: 0x060000DD RID: 221 RVA: 0x0000A9C8 File Offset: 0x00008BC8
		public static DataSeriesDescriptionDTO GetDataSeriesDescription(string description)
		{
			List<DataSeriesDescriptionDTO> dataSeriesDescriptionDB = PerfMgDB.GetDataSeriesDescriptionDB(description);
			bool flag = dataSeriesDescriptionDB.Count == 0;
			DataSeriesDescriptionDTO dataSeriesDescriptionDTO;
			if (flag)
			{
				dataSeriesDescriptionDTO = null;
			}
			else
			{
				dataSeriesDescriptionDTO = dataSeriesDescriptionDB[0];
			}
			return dataSeriesDescriptionDTO;
		}

		// Token: 0x060000DE RID: 222 RVA: 0x0000AA00 File Offset: 0x00008C00
		private static List<DataSeriesDescriptionDTO> GetDataSeriesDescriptionDB(string description)
		{
			List<DataSeriesDescriptionDTO> list = new List<DataSeriesDescriptionDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<DataSeriesDescriptionDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Data_Series_Description_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(description, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@Description", description));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new DataSeriesDescriptionDTO
					{
						Description = Conversions.ToString(sqlDataReader.GetValue(0)),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						Active = Conversions.ToBoolean(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))),
						AvailableForTrend = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						ColorForTrend = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000DF RID: 223 RVA: 0x0000ABC0 File Offset: 0x00008DC0
		public static List<DataSeriesFormatDTO> GetDataSeriesFormat()
		{
			return PerfMgDB.GetDataSeriesFormat(0);
		}

		// Token: 0x060000E0 RID: 224 RVA: 0x0000ABD8 File Offset: 0x00008DD8
		public static string GetDataFormatted(decimal value, int formatID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			string text2;
			try
			{
				sqlConnection.Open();
				string text = "Select dbo.udf_Format(@Value,@Format)";
				text2 = Conversions.ToString(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Value", value),
						new SqlParameter("@Format", formatID)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return text2;
		}

		// Token: 0x060000E1 RID: 225 RVA: 0x0000ACB4 File Offset: 0x00008EB4
		public static int GetDataSeriesFormatID(string prefix, string suffix, int multiplier, int decimalPlaces, bool thouSeperator)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				string text = "Select\tCoalesce(Min(FormatID),-1) from dbo.T_UPM_DataSeriesFormat Where\t(Prefix = @Prefix Or @Prefix is Null) and         (Suffix = @Suffix Or @Suffix is Null) and        Multiplier = @Multiplier and        ThousandSeperator = @Sep and        DecimalPlaces = @Decimal";
				num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Prefix", prefix),
						new SqlParameter("@Suffix", suffix),
						new SqlParameter("@Multiplier", multiplier),
						new SqlParameter("@Sep", thouSeperator),
						new SqlParameter("@Decimal", decimalPlaces)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000E2 RID: 226 RVA: 0x0000ADD8 File Offset: 0x00008FD8
		public static List<DataSeriesFormatDTO> GetDataSeriesFormat(int formatID)
		{
			List<DataSeriesFormatDTO> list = new List<DataSeriesFormatDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<DataSeriesFormatDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Data_Series_Format_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = formatID > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@FormatID", formatID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new DataSeriesFormatDTO
					{
						FormatID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						Description = Conversions.ToString(sqlDataReader.GetValue(1)),
						Prefix = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						Suffix = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						Multiplier = Conversions.ToDecimal(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))),
						ThousandSeperator = Conversions.ToBoolean(sqlDataReader.GetValue(5)),
						DecimalPlaces = Conversions.ToInteger(sqlDataReader.GetValue(6)),
						DateFormatID = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000E3 RID: 227 RVA: 0x0000229E File Offset: 0x0000049E
		public static void SaveDataSeriesFormat(DataSeriesFormatDTO data)
		{
			PerfMgDB.SetDataSeriesFormat("S", data);
		}

		// Token: 0x060000E4 RID: 228 RVA: 0x0000AF9C File Offset: 0x0000919C
		private static void SetDataSeriesFormat(string operation, DataSeriesFormatDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Data_Series_Format_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@FormatID", data.FormatID),
						new SqlParameter("@FormatDescription", data.Description),
						new SqlParameter("@Prefix", data.Prefix),
						new SqlParameter("@Suffix", data.Suffix),
						new SqlParameter("@Multiplier", data.Multiplier),
						new SqlParameter("@ThousandSeperator", data.ThousandSeperator),
						new SqlParameter("@DecimalPlaces", data.DecimalPlaces),
						new SqlParameter("@DateFormatID", data.DateFormatID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000E5 RID: 229 RVA: 0x0000B15C File Offset: 0x0000935C
		public static void SaveAllDataSeriesFormatIDs(string cID, int formatID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "Update t_upm_data_series Set FormatID = @FormatID where c_ID = @CID";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@CID", cID),
						new SqlParameter("@FormatID", formatID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000E6 RID: 230 RVA: 0x0000B228 File Offset: 0x00009428
		public static List<DateFormatDTO> GetDateFormat()
		{
			return PerfMgDB.GetDateFormat(0);
		}

		// Token: 0x060000E7 RID: 231 RVA: 0x0000B240 File Offset: 0x00009440
		public static List<DateFormatDTO> GetDateFormat(int dateFormatID)
		{
			List<DateFormatDTO> list = new List<DateFormatDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<DateFormatDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_DateFormat_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = dateFormatID > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@DateFormatID", dateFormatID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new DateFormatDTO
					{
						DateFormatID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						DateFormat = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000E8 RID: 232 RVA: 0x000022AE File Offset: 0x000004AE
		public static void UpdateUPMDataSeriesSortOrder(DataSeriesDTO data)
		{
			PerfMgDB.UpdateUPMDataSeriesSortOrder("U", data);
		}

		// Token: 0x060000E9 RID: 233 RVA: 0x0000B358 File Offset: 0x00009558
		private static void UpdateUPMDataSeriesSortOrder(string operation, DataSeriesDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_UpdateDSSortOrder_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@CID", data.CID),
						new SqlParameter("@DSID", data.DSID),
						new SqlParameter("@DataSeries", data.DataSeries)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000EA RID: 234 RVA: 0x0000B46C File Offset: 0x0000966C
		public static List<MonthsDTO> Get_Months()
		{
			List<MonthsDTO> list = new List<MonthsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MonthsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_Months_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MonthsDTO
					{
						MonthVal = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						MonthDescription = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000EB RID: 235 RVA: 0x0000B55C File Offset: 0x0000975C
		public static object Get_Years()
		{
			List<YearsDTO> list = new List<YearsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			object obj;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_Years_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new YearsDTO
					{
						YearVal = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						YearDescription = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				obj = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return obj;
		}

		// Token: 0x060000EC RID: 236 RVA: 0x0000B64C File Offset: 0x0000984C
		public static void InsertNullPoints(int cID, int year)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "Insert Into t_upm_Points Select \ta.C_ID, a.DS_ID, a.Description, Null, @UserID, @UserID, getdate(), a.Reporting_Year + 1, 0, getdate(), a.Month From \tt_upm_Points as a Join t_upm_data_series as b On a.ds_ID = b.ds_ID        Left Join t_upm_Points as c On a.ds_ID = c.ds_ID and a.Reporting_Year = c.Reporting_Year Where\ta.Reporting_Year = @Year and b.Active = 1 and b.C_ID = @C_ID and c.DS_ID is null ";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Year", year),
						new SqlParameter("@C_ID", cID),
						new SqlParameter("@UserID", Environment.UserName)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000ED RID: 237 RVA: 0x0000B738 File Offset: 0x00009938
		public static void CarryOverPoints(int cID, int year)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_PointsCO_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Year", year),
						new SqlParameter("@C_ID", cID),
						new SqlParameter("@UserID", Environment.UserName)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000EE RID: 238 RVA: 0x000022BE File Offset: 0x000004BE
		public static void SaveCOPoints(UPMPointsDTO data)
		{
			PerfMgDB.SetCOPoints("S", data);
		}

		// Token: 0x060000EF RID: 239 RVA: 0x0000B824 File Offset: 0x00009A24
		private static void SetCOPoints(string operation, UPMPointsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_PointsCO_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@CID", data.CID),
						new SqlParameter("@Year", data.ReportingYear),
						new SqlParameter("@UserID", Environment.UserName)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060000F0 RID: 240 RVA: 0x0000B92C File Offset: 0x00009B2C
		public static object GetMonths()
		{
			return new List<int>
			{
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				11, 12
			};
		}

		// Token: 0x060000F1 RID: 241 RVA: 0x0000B9AC File Offset: 0x00009BAC
		public static List<UPMPointsDTO> GetUPMPointsDS(int dsID, int year, int month)
		{
			return PerfMgDB.GetUPMPointsByDS(dsID, year, month);
		}

		// Token: 0x060000F2 RID: 242 RVA: 0x0000B9C8 File Offset: 0x00009BC8
		public static List<UPMPointsDTO> GetUPMPointsByDS(int cID, int year, int month)
		{
			List<UPMPointsDTO> list = new List<UPMPointsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMPointsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_Points_by_DS_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@C_ID", cID),
						new SqlParameter("@Reporting_Year", year),
						new SqlParameter("@Month", month)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					UPMPointsDTO upmpointsDTO = new UPMPointsDTO();
					upmpointsDTO.C_ID = Conversions.ToInteger(sqlDataReader.GetValue(0));
					upmpointsDTO.DS_ID = Conversions.ToInteger(sqlDataReader.GetValue(1));
					upmpointsDTO.MetricID = Conversions.ToString(sqlDataReader.GetValue(2));
					upmpointsDTO.PointsDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)));
					upmpointsDTO.MonthValue = Conversions.ToInteger(sqlDataReader.GetValue(4));
					bool flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO2 = upmpointsDTO;
						object value = sqlDataReader.GetValue(5);
						decimal? num;
						upmpointsDTO2.YValue = ((value != null) ? ((decimal?)value) : num);
					}
					upmpointsDTO.CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)));
					upmpointsDTO.ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)));
					upmpointsDTO.ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8)));
					upmpointsDTO.ReportingYear = Conversions.ToString(sqlDataReader.GetValue(9));
					upmpointsDTO.CreateDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					upmpointsDTO.DataSeriesDescription = Conversions.ToString(sqlDataReader.GetValue(11));
					list.Add(upmpointsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000F3 RID: 243 RVA: 0x0000BC38 File Offset: 0x00009E38
		public static List<UPMPointsDTO> GetUPMPoints(int dsID, int year)
		{
			return PerfMgDB.GetUPMPoints(dsID, year, string.Empty);
		}

		// Token: 0x060000F4 RID: 244 RVA: 0x0000BC58 File Offset: 0x00009E58
		public static List<UPMPointsDTO> GetUPMPoints(int dsID, int year, string pointDesc)
		{
			List<UPMPointsDTO> list = new List<UPMPointsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMPointsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_Points_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", dsID));
				sqlCommand.Parameters.Add(new SqlParameter("@Reporting_Year", year));
				bool flag = Operators.CompareString(pointDesc, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@Description", pointDesc));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					UPMPointsDTO upmpointsDTO = new UPMPointsDTO();
					upmpointsDTO.C_ID = Conversions.ToInteger(sqlDataReader.GetValue(0));
					upmpointsDTO.DS_ID = Conversions.ToInteger(sqlDataReader.GetValue(1));
					upmpointsDTO.MetricID = Conversions.ToString(sqlDataReader.GetValue(2));
					upmpointsDTO.PointsDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)));
					upmpointsDTO.MonthValue = Conversions.ToInteger(sqlDataReader.GetValue(4));
					flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO2 = upmpointsDTO;
						object value = sqlDataReader.GetValue(5);
						decimal? num;
						upmpointsDTO2.YValue = ((value != null) ? ((decimal?)value) : num);
					}
					upmpointsDTO.CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)));
					upmpointsDTO.ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)));
					upmpointsDTO.ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8)));
					upmpointsDTO.ReportingYear = Conversions.ToString(sqlDataReader.GetValue(9));
					upmpointsDTO.CreateDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					upmpointsDTO.DataSeriesDescription = Conversions.ToString(sqlDataReader.GetValue(11));
					list.Add(upmpointsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000F5 RID: 245 RVA: 0x0000BEDC File Offset: 0x0000A0DC
		public static List<UPMPointsDTO> GetUPMPoints(int year, string pointDesc, string contactID, List<string> seriesDesc)
		{
			List<UPMPointsDTO> list = new List<UPMPointsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMPointsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "";
				try
				{
					foreach (string text2 in seriesDesc)
					{
						text = text + "'" + text2 + "',";
					}
				}
				finally
				{
					List<string>.Enumerator enumerator;
					((IDisposable)enumerator).Dispose();
				}
				text = text.Substring(0, checked(text.Length - 1));
				string text3 = string.Concat(new string[]
				{
					"select \ta.C_ID,        a.DS_ID,        b.CHART_ID,        a.DESCRIPTION,        a.Month,        a.Y,        a.CREATED_BY,        a.CHANGED_BY,        a.CHANGED_DATE,        a.Reporting_Year,        a.CreateDate,        b.Description from \tdbo.T_UPM_Points as a Join dbo.T_UPM_Data_Series as b On a.DS_ID = b.DS_ID \t    Join dbo.T_UPM_Charts as c On b.C_ID = c.C_ID where \ta.Reporting_Year = ",
					Conversions.ToString(year),
					" and        a.Description = '",
					pointDesc,
					"' and        b.Description in (",
					text,
					") and        c.PM_Contact_ID = '",
					contactID,
					"' order by a.Chart_ID, b.Data_Series, a.X "
				});
				SqlDataReader sqlDataReader = new SqlCommand(text3, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					UPMPointsDTO upmpointsDTO = new UPMPointsDTO();
					upmpointsDTO.C_ID = Conversions.ToInteger(sqlDataReader.GetValue(0));
					upmpointsDTO.DS_ID = Conversions.ToInteger(sqlDataReader.GetValue(1));
					upmpointsDTO.MetricID = Conversions.ToString(sqlDataReader.GetValue(2));
					upmpointsDTO.PointsDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)));
					upmpointsDTO.MonthValue = Conversions.ToInteger(sqlDataReader.GetValue(4));
					bool flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO2 = upmpointsDTO;
						object value = sqlDataReader.GetValue(5);
						decimal? num;
						upmpointsDTO2.YValue = ((value != null) ? ((decimal?)value) : num);
					}
					upmpointsDTO.CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)));
					upmpointsDTO.ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)));
					upmpointsDTO.ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8)));
					upmpointsDTO.ReportingYear = Conversions.ToString(sqlDataReader.GetValue(9));
					upmpointsDTO.CreateDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					upmpointsDTO.DataSeriesDescription = Conversions.ToString(sqlDataReader.GetValue(11));
					upmpointsDTO.ModificationType = IModificationIndicator.ModificationTypes.NotModified;
					list.Add(upmpointsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000F6 RID: 246 RVA: 0x0000C1D4 File Offset: 0x0000A3D4
		public static List<UPMPointsDTO> GetUPMMetricDSPointsByMonth(int cID, int reportingyear)
		{
			List<UPMPointsDTO> list = new List<UPMPointsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMPointsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_MetricDSPointsByMonth_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@C_ID", cID),
						new SqlParameter("@Reporting_Year", reportingyear)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					UPMPointsDTO upmpointsDTO = new UPMPointsDTO();
					UPMPointsDTO upmpointsDTO2 = upmpointsDTO;
					object value = sqlDataReader.GetValue(0);
					int? num;
					upmpointsDTO2.DSID = ((value != null) ? ((int?)value) : num);
					upmpointsDTO.CID = Conversions.ToInteger(sqlDataReader.GetValue(1));
					upmpointsDTO.MetricID = Conversions.ToString(sqlDataReader.GetValue(2));
					UPMPointsDTO upmpointsDTO3 = upmpointsDTO;
					object value2 = sqlDataReader.GetValue(3);
					upmpointsDTO3.DataSeries = ((value2 != null) ? ((int?)value2) : num);
					upmpointsDTO.dsDescription = Conversions.ToString(sqlDataReader.GetValue(4));
					upmpointsDTO.CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					upmpointsDTO.ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)));
					upmpointsDTO.ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)));
					upmpointsDTO.FormatID = Conversions.ToInteger(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))));
					upmpointsDTO.ShowOnTrend = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)));
					upmpointsDTO.ShowAsLine = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					upmpointsDTO.ShowAsStackBar = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)));
					upmpointsDTO.Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)));
					upmpointsDTO.MonthDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13)));
					bool flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14)));
					if (flag)
					{
						UPMPointsDTO upmpointsDTO4 = upmpointsDTO;
						object value3 = sqlDataReader.GetValue(14);
						decimal? num2;
						upmpointsDTO4.YValue = ((value3 != null) ? ((decimal?)value3) : num2);
					}
					upmpointsDTO.ReportingYear = Conversions.ToString(sqlDataReader.GetValue(15));
					UPMPointsDTO upmpointsDTO5 = upmpointsDTO;
					object value4 = sqlDataReader.GetValue(16);
					upmpointsDTO5.month = ((value4 != null) ? ((int?)value4) : num);
					upmpointsDTO.ClearBuffers();
					list.Add(upmpointsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060000F7 RID: 247 RVA: 0x0000C4C8 File Offset: 0x0000A6C8
		private static int SavePointsArchive(string operation, UPMPointsDTO data)
		{
			int num = 0;
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSavePointsArchiveRequest(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000F8 RID: 248 RVA: 0x0000C568 File Offset: 0x0000A768
		private static int SavePointsArchiveTAB2(string operation, UPMPointsDTO data)
		{
			int num = 0;
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSavePointsArchiveRequestTAB2(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000F9 RID: 249 RVA: 0x0000C608 File Offset: 0x0000A808
		private static int SavePointsArchiveTAB3(string operation, UPMPointsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSavePointsArchiveRequestTAB3(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000FA RID: 250 RVA: 0x0000C6A8 File Offset: 0x0000A8A8
		private static int SetUPMPoints(string operation, UPMPointsDTO data)
		{
			int num = 0;
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSavePointsRequest(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000FB RID: 251 RVA: 0x0000C748 File Offset: 0x0000A948
		private static int SetUPMPointsTAB2(string operation, UPMPointsDTO data)
		{
			int num = 0;
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSavePointsRequestTAB2(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000FC RID: 252 RVA: 0x0000C7E8 File Offset: 0x0000A9E8
		private static int SetUPMPointsTAB3(string operation, UPMPointsDTO data)
		{
			int num = 0;
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSavePointsRequestTAB3(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060000FD RID: 253 RVA: 0x0000C888 File Offset: 0x0000AA88
		public static int SavePointsArchive(UPMPointsDTO data)
		{
			return PerfMgDB.SavePointsArchive("S", data);
		}

		// Token: 0x060000FE RID: 254 RVA: 0x0000C8A8 File Offset: 0x0000AAA8
		public static int SavePointsArchiveTAB2(UPMPointsDTO data)
		{
			return PerfMgDB.SavePointsArchiveTAB2("S", data);
		}

		// Token: 0x060000FF RID: 255 RVA: 0x0000C8C8 File Offset: 0x0000AAC8
		public static int SavePointsArchiveTAB3(UPMPointsDTO data)
		{
			return PerfMgDB.SavePointsArchiveTAB3("S", data);
		}

		// Token: 0x06000100 RID: 256 RVA: 0x0000C8E8 File Offset: 0x0000AAE8
		public static int SaveUPMPoints(UPMPointsDTO data)
		{
			return PerfMgDB.SetUPMPoints("S", data);
		}

		// Token: 0x06000101 RID: 257 RVA: 0x0000C908 File Offset: 0x0000AB08
		public static int SaveUPMPointsTAB2(UPMPointsDTO data)
		{
			return PerfMgDB.SetUPMPointsTAB2("S", data);
		}

		// Token: 0x06000102 RID: 258 RVA: 0x0000C928 File Offset: 0x0000AB28
		public static int SaveUPMPointsTAB3(UPMPointsDTO data)
		{
			return PerfMgDB.SetUPMPointsTAB3("S", data);
		}

		// Token: 0x06000103 RID: 259 RVA: 0x0000C948 File Offset: 0x0000AB48
		public static int DeleteUPMPoints(UPMPointsDTO data)
		{
			return PerfMgDB.SetUPMPoints("D", data);
		}

		// Token: 0x06000104 RID: 260 RVA: 0x0000C968 File Offset: 0x0000AB68
		public static SqlCommand CreateDeletePointsRequest(int dsID, int year)
		{
			return new SqlCommand("Delete From T_UPM_Points Where DS_ID = @DS_ID and Reporting_Year = @Reporting_Year")
			{
				CommandType = CommandType.Text,
				Parameters = 
				{
					new SqlParameter("@DS_ID", dsID),
					new SqlParameter("@Reporting_Year", year)
				}
			};
		}

		// Token: 0x06000105 RID: 261 RVA: 0x0000C9C8 File Offset: 0x0000ABC8
		public static SqlCommand CreateSavePointsRequest(string operation, UPMPointsDTO data)
		{
			SqlCommand sqlCommand = new SqlCommand("dbo.usp_UPM_Points_set");
			sqlCommand.CommandType = CommandType.StoredProcedure;
			sqlCommand.Parameters.Add(new SqlParameter("@Operation", operation));
			bool flag = Information.IsNothing(data.DSID);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DS_ID));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DSID));
			}
			flag = Information.IsNothing(data.MonthDesc);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Points_Description", data.PointsDescription));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Points_Description", data.MonthDesc));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@Y", data.YValue));
			sqlCommand.Parameters.Add(new SqlParameter("@Reporting_Year", data.ReportingYear));
			int num = 0;
			int? month = data.month;
			bool? flag2;
			if (month == null)
			{
				flag2 = null;
			}
			else
			{
				bool? flag3 = new bool?(month.GetValueOrDefault() == num);
				flag2 = flag3;
			}
			bool? flag4 = flag2;
			flag = flag4.GetValueOrDefault();
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.MonthValue));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.month));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@UserID", Environment.UserName));
			return sqlCommand;
		}

		// Token: 0x06000106 RID: 262 RVA: 0x0000C9C8 File Offset: 0x0000ABC8
		public static SqlCommand CreateSavePointsRequestTAB2(string operation, UPMPointsDTO data)
		{
			SqlCommand sqlCommand = new SqlCommand("dbo.usp_UPM_Points_set");
			sqlCommand.CommandType = CommandType.StoredProcedure;
			sqlCommand.Parameters.Add(new SqlParameter("@Operation", operation));
			bool flag = Information.IsNothing(data.DSID);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DS_ID));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DSID));
			}
			flag = Information.IsNothing(data.MonthDesc);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Points_Description", data.PointsDescription));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Points_Description", data.MonthDesc));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@Y", data.YValue));
			sqlCommand.Parameters.Add(new SqlParameter("@Reporting_Year", data.ReportingYear));
			int num = 0;
			int? month = data.month;
			bool? flag2;
			if (month == null)
			{
				flag2 = null;
			}
			else
			{
				bool? flag3 = new bool?(month.GetValueOrDefault() == num);
				flag2 = flag3;
			}
			bool? flag4 = flag2;
			flag = flag4.GetValueOrDefault();
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.MonthValue));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.month));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@UserID", Environment.UserName));
			return sqlCommand;
		}

		// Token: 0x06000107 RID: 263 RVA: 0x0000C9C8 File Offset: 0x0000ABC8
		public static SqlCommand CreateSavePointsRequestTAB3(string operation, UPMPointsDTO data)
		{
			SqlCommand sqlCommand = new SqlCommand("dbo.usp_UPM_Points_set");
			sqlCommand.CommandType = CommandType.StoredProcedure;
			sqlCommand.Parameters.Add(new SqlParameter("@Operation", operation));
			bool flag = Information.IsNothing(data.DSID);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DS_ID));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DSID));
			}
			flag = Information.IsNothing(data.MonthDesc);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Points_Description", data.PointsDescription));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Points_Description", data.MonthDesc));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@Y", data.YValue));
			sqlCommand.Parameters.Add(new SqlParameter("@Reporting_Year", data.ReportingYear));
			int num = 0;
			int? month = data.month;
			bool? flag2;
			if (month == null)
			{
				flag2 = null;
			}
			else
			{
				bool? flag3 = new bool?(month.GetValueOrDefault() == num);
				flag2 = flag3;
			}
			bool? flag4 = flag2;
			flag = flag4.GetValueOrDefault();
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.MonthValue));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.month));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@UserID", Environment.UserName));
			return sqlCommand;
		}

		// Token: 0x06000108 RID: 264 RVA: 0x0000CB90 File Offset: 0x0000AD90
		public static SqlCommand CreateSavePointsArchiveRequest(string operation, UPMPointsDTO data)
		{
			SqlCommand sqlCommand = new SqlCommand("dbo.usp_UPM_Points_Archive_set");
			sqlCommand.CommandType = CommandType.StoredProcedure;
			sqlCommand.Parameters.Add(new SqlParameter("@Operation", operation));
			bool flag = Information.IsNothing(data.DSID);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DS_ID));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DSID));
			}
			int num = 0;
			int? month = data.month;
			bool? flag2;
			if (month == null)
			{
				flag2 = null;
			}
			else
			{
				bool? flag3 = new bool?(month.GetValueOrDefault() == num);
				flag2 = flag3;
			}
			bool? flag4 = flag2;
			flag = flag4.GetValueOrDefault();
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.MonthValue));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.month));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@ReportingYear", data.ReportingYear));
			sqlCommand.Parameters.Add(new SqlParameter("@CreateDate", DateTime.Now));
			sqlCommand.Parameters.Add(new SqlParameter("@Y", data.YValue));
			sqlCommand.Parameters.Add(new SqlParameter("@UserID", Environment.UserName));
			return sqlCommand;
		}

		// Token: 0x06000109 RID: 265 RVA: 0x0000CB90 File Offset: 0x0000AD90
		public static SqlCommand CreateSavePointsArchiveRequestTAB2(string operation, UPMPointsDTO data)
		{
			SqlCommand sqlCommand = new SqlCommand("dbo.usp_UPM_Points_Archive_set");
			sqlCommand.CommandType = CommandType.StoredProcedure;
			sqlCommand.Parameters.Add(new SqlParameter("@Operation", operation));
			bool flag = Information.IsNothing(data.DSID);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DS_ID));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DSID));
			}
			int num = 0;
			int? month = data.month;
			bool? flag2;
			if (month == null)
			{
				flag2 = null;
			}
			else
			{
				bool? flag3 = new bool?(month.GetValueOrDefault() == num);
				flag2 = flag3;
			}
			bool? flag4 = flag2;
			flag = flag4.GetValueOrDefault();
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.MonthValue));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.month));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@ReportingYear", data.ReportingYear));
			sqlCommand.Parameters.Add(new SqlParameter("@CreateDate", DateTime.Now));
			sqlCommand.Parameters.Add(new SqlParameter("@Y", data.YValue));
			sqlCommand.Parameters.Add(new SqlParameter("@UserID", Environment.UserName));
			return sqlCommand;
		}

		// Token: 0x0600010A RID: 266 RVA: 0x0000CB90 File Offset: 0x0000AD90
		public static SqlCommand CreateSavePointsArchiveRequestTAB3(string operation, UPMPointsDTO data)
		{
			SqlCommand sqlCommand = new SqlCommand("dbo.usp_UPM_Points_Archive_set");
			sqlCommand.CommandType = CommandType.StoredProcedure;
			sqlCommand.Parameters.Add(new SqlParameter("@Operation", operation));
			bool flag = Information.IsNothing(data.DSID);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DS_ID));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DSID));
			}
			int num = 0;
			int? month = data.month;
			bool? flag2;
			if (month == null)
			{
				flag2 = null;
			}
			else
			{
				bool? flag3 = new bool?(month.GetValueOrDefault() == num);
				flag2 = flag3;
			}
			bool? flag4 = flag2;
			flag = flag4.GetValueOrDefault();
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.MonthValue));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Month", data.month));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@ReportingYear", data.ReportingYear));
			sqlCommand.Parameters.Add(new SqlParameter("@CreateDate", DateTime.Now));
			sqlCommand.Parameters.Add(new SqlParameter("@Y", data.YValue));
			sqlCommand.Parameters.Add(new SqlParameter("@UserID", Environment.UserName));
			return sqlCommand;
		}

		// Token: 0x0600010B RID: 267 RVA: 0x0000CD2C File Offset: 0x0000AF2C
		public static UPMPointsDTO GetUPMPointFromExcel(string chartID, int reportingYear, string pointDesc, string seriesDesc)
		{
			UPMPointsDTO upmpointsDTO = null;
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			UPMPointsDTO upmpointsDTO3;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_PointToUPMPoint_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ChartID", chartID),
						new SqlParameter("@ReportingYear", reportingYear),
						new SqlParameter("@DataSeriesDescription", seriesDesc),
						new SqlParameter("@PointDescription", pointDesc)
					}
				}.ExecuteReader();
				bool flag = sqlDataReader.Read();
				if (flag)
				{
					upmpointsDTO = new UPMPointsDTO();
					upmpointsDTO.C_ID = Conversions.ToInteger(sqlDataReader.GetValue(0));
					upmpointsDTO.DS_ID = Conversions.ToInteger(sqlDataReader.GetValue(1));
					upmpointsDTO.MetricID = Conversions.ToString(sqlDataReader.GetValue(2));
					upmpointsDTO.PointsDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)));
					upmpointsDTO.MonthValue = Conversions.ToInteger(sqlDataReader.GetValue(4));
					UPMPointsDTO upmpointsDTO2 = upmpointsDTO;
					object obj = DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					decimal? num;
					upmpointsDTO2.YValue = ((obj != null) ? ((decimal?)obj) : num);
					upmpointsDTO.ReportingYear = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)));
				}
				upmpointsDTO3 = upmpointsDTO;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return upmpointsDTO3;
		}

		// Token: 0x0600010C RID: 268 RVA: 0x0000CF0C File Offset: 0x0000B10C
		public static List<MonthsDTO> GetUPMMonths()
		{
			List<MonthsDTO> list = new List<MonthsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MonthsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_Months_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MonthsDTO
					{
						MonthVal = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						MonthDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600010D RID: 269 RVA: 0x0000D000 File Offset: 0x0000B200
		public static List<PointsDescriptionDTO> GetPointsDescription()
		{
			List<PointsDescriptionDTO> list = new List<PointsDescriptionDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<PointsDescriptionDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Points_Description_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new PointsDescriptionDTO
					{
						Description = Conversions.ToString(sqlDataReader.GetValue(0)),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						Active = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600010E RID: 270 RVA: 0x0000D144 File Offset: 0x0000B344
		public static string GetMaxMonth(int cID, int year)
		{
			string text = "Select\tdbo.udf_GetMonthDescription(Max(dbo.udf_MonthSortOrder(Description))) From\tt_upm_points Where\tReporting_Year = @Year and C_ID = @CID and Y is not Null ";
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			string text3;
			try
			{
				sqlConnection.Open();
				string text2 = Conversions.ToString(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Year", year),
						new SqlParameter("@CID", cID)
					}
				}.ExecuteScalar());
				text3 = text2;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return text3;
		}

		// Token: 0x0600010F RID: 271 RVA: 0x0000D22C File Offset: 0x0000B42C
		public static string GetPointLevel(int dsID, CriteriaDTO criteria)
		{
			string text = "Select \tdbo.udf_PerfLevel(Max(Case e.Description When 'MINIMUM' Then a.Y End),Max(Case e.Description When 'TARGET' Then a.Y End),Max(Case e.Description When 'MAXIMUM' Then a.Y End),Max(Case e.Description When 'YTD' Then a.Y End), b.Inverse_Scale) as YTD_Level From\tt_upm_points as a Join t_upm_charts as b On a.C_ID = b.C_ID        Join t_upm_data_series as e on a.DS_ID = e.DS_ID Where\ta.Reporting_Year = @year and        a.Description = @mon and        a.c_ID in (Select c_ID from t_upm_data_series where ds_id = @dsID) Group By b.Inverse_Scale";
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			string text2;
			try
			{
				sqlConnection.Open();
				text2 = Conversions.ToString(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@year", criteria.ReportingYear),
						new SqlParameter("@mon", criteria.ReportingPeriod),
						new SqlParameter("@dsID", dsID)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return text2;
		}

		// Token: 0x06000110 RID: 272 RVA: 0x0000D328 File Offset: 0x0000B528
		public static List<DataEntryPointsDTO> GetDataEntryPointsInfo(int H_ID, CriteriaDTO criteria)
		{
			DataEntryPointsDTO dataEntryPointsDTO = new DataEntryPointsDTO();
			string closedQuarter = myConversions.GetClosedQuarter(criteria.ReportingPeriod);
			int closedQuarterYear = myConversions.GetClosedQuarterYear(criteria.ReportingPeriod, criteria.ReportingYear);
			string reportingPeriod = myConversions.GetPrevReportingPeriod(closedQuarter, closedQuarterYear).ReportingPeriod;
			int reportingYear = myConversions.GetPrevReportingPeriod(closedQuarter, closedQuarterYear).ReportingYear;
			string reportingPeriod2 = criteria.ReportingPeriod;
			int reportingYear2 = criteria.ReportingYear;
			string reportingPeriod3 = myConversions.GetPrevReportingPeriod(criteria.ReportingPeriod, criteria.ReportingYear).ReportingPeriod;
			int reportingYear3 = myConversions.GetPrevReportingPeriod(criteria.ReportingPeriod, criteria.ReportingYear).ReportingYear;
			string text = "Select \tDistinct AA.DS_ID,        AA.Reporting_Year,        AA.X,        AA.PtDesc,        AA.Y,        AA.Reviewed,        AA.CentrallyManaged,        AA.AllowEditTargets,        AA.H_ID,        AA.DsDesc,        BB.Y,        CC.YTD_Level,        DD.YTD_Level,        FF.Comments,        EE.Comments,        AA.Chart_ID,        CC.Monthly_Level,        DD.Monthly_Level From    (Select a.DS_ID,            a.Reporting_Year,             a.X,             a.Description as PtDesc,            a.Y,            a.Reviewed,            b.CentrallyManaged,            b.AllowEditTargets,            c.H_ID,            e.Description as DsDesc,            a.C_ID,            b.Chart_ID    from \tt_upm_points as a Join t_upm_charts as b On a.C_ID = b.C_ID            Join t_upm_data_series as e on a.DS_ID = e.DS_ID            Join t_upm_hierarchy_Nodes as c On a.DS_ID = c.fkID and c.NodeTypeID = 7    Where\t((a.Reporting_Year = @monYear and  a.Description = @mon) Or           (a.Reporting_Year = @qtrYear and  a.Description = @qtr)) And            c.H_ID = @HID) as AA Left Join    (Select\ta.Y,            a.DS_ID,            c.H_ID    From \tt_upm_points as a Join t_upm_hierarchy_Nodes as c On a.DS_ID = c.fkID and c.NodeTypeID = 7    Where\t((a.Reporting_Year = @prevMonYear and  a.Description = @prevMon) Or           (a.Reporting_Year = @prevQtrYear and  a.Description = @prevQtr)) And            c.H_ID = @HID) AS BB On AA.DS_ID = BB.DS_ID and    AA.H_ID = BB.H_ID  Left Join    (Select a.C_ID,            dbo.udf_PerfLevel(Max(Case e.Description When 'MINIMUM' Then a.Y End),Max(Case e.Description When 'TARGET' Then a.Y End),Max(Case e.Description When 'MAXIMUM' Then a.Y End),Max(Case e.Description When 'YTD' Then a.Y End), b.Inverse_Scale) as YTD_Level,            dbo.udf_PerfLevel(Max(Case e.Description When 'MONTHLY MINIMUM' Then a.Y End),Max(Case e.Description When 'MONTHLY TARGET' Then a.Y End),Max(Case e.Description When 'MONTHLY MAXIMUM' Then a.Y End),Max(Case e.Description When 'Monthly' Then a.Y End), b.Inverse_Scale) as Monthly_Level    From\tt_upm_points as a Join t_upm_charts as b On a.C_ID = b.C_ID             Join t_upm_data_series as e on a.DS_ID = e.DS_ID             Join t_upm_hierarchy_Nodes as c On b.C_ID = c.fkID and c.NodeTypeID = 6     Where\t((a.Reporting_Year = @monYear and  a.Description = @mon) Or           (a.Reporting_Year = @qtrYear and  a.Description = @qtr)) And            c.H_ID = @HID    Group By a.C_ID, b.Inverse_Scale) as CC On AA.C_ID = CC.C_ID Left Join \t(Select a.C_ID,            dbo.udf_PerfLevel(Max(Case e.Description When 'MINIMUM' Then a.Y End),Max(Case e.Description When 'TARGET' Then a.Y End),Max(Case e.Description When 'MAXIMUM' Then a.Y End),Max(Case e.Description When 'YTD' Then a.Y End), b.Inverse_Scale) as YTD_Level,            dbo.udf_PerfLevel(Max(Case e.Description When 'MONTHLY MINIMUM' Then a.Y End),Max(Case e.Description When 'MONTHLY TARGET' Then a.Y End),Max(Case e.Description When 'MONTHLY MAXIMUM' Then a.Y End),Max(Case e.Description When 'Monthly' Then a.Y End), b.Inverse_Scale) as Monthly_Level    From\tt_upm_points as a Join t_upm_charts as b On a.C_ID = b.C_ID             Join t_upm_data_series as e on a.DS_ID = e.DS_ID             Join t_upm_hierarchy_nodes as c On b.C_ID = c.fkID and c.NodeTypeID = 6     Where\t((a.Reporting_Year = @prevMonYear and  a.Description = @prevMon) Or           (a.Reporting_Year = @prevQtrYear and  a.Description = @prevQtr)) And            c.H_ID = @HID    Group By a.C_ID, b.Inverse_Scale) as DD On AA.C_ID = DD.C_ID Left Join \t(Select a.C_ID,            f.Comments    From\tt_upm_points as a Join t_upm_charts as b On a.C_ID = b.C_ID             Join t_upm_data_series as e on a.DS_ID = e.DS_ID             Join t_upm_hierarchy_Nodes as c On b.C_ID = c.fkID and c.NodeTypeID = 6             Join t_web_pm_summary_comments as f on a.Chart_ID = f.Chart_ID and a.Reporting_Year = f.Reporting_Year and a.Description = f.Mo_Qtr    Where\t((a.Reporting_Year = @prevMonYear and  a.Description = @prevMon) Or           (a.Reporting_Year = @prevQtrYear and  a.Description = @prevQtr)) And            c.H_ID = @HID and e.Description = 'YTD'    ) as EE On AA.C_ID = EE.C_ID  Left Join    (Select a.C_ID,            f.Comments    From\tt_upm_points as a Join t_upm_charts as b On a.C_ID = b.C_ID             Join t_upm_data_series as e on a.DS_ID = e.DS_ID             Join t_upm_hierarchy_nodes as c On b.C_ID = c.fkID and c.NodeTypeID = 6             Join t_web_pm_summary_comments as f on a.Chart_ID = f.Chart_ID and a.Reporting_Year = f.Reporting_Year and a.Description = f.Mo_Qtr    Where\t((a.Reporting_Year = @monYear and  a.Description = @mon) Or           (a.Reporting_Year = @qtrYear and  a.Description = @qtr)) And            c.H_ID = @HID and e.Description = 'YTD'    ) as FF On AA.C_ID = FF.C_ID ";
			List<DataEntryPointsDTO> list = new List<DataEntryPointsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<DataEntryPointsDTO> list2;
			try
			{
				sqlConnection.Open();
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@HID", H_ID),
						new SqlParameter("@mon", reportingPeriod2),
						new SqlParameter("@monYear", reportingYear2),
						new SqlParameter("@qtr", closedQuarter),
						new SqlParameter("@qtrYear", closedQuarterYear),
						new SqlParameter("@prevMon", reportingPeriod3),
						new SqlParameter("@prevMonYear", reportingYear3),
						new SqlParameter("@prevQtr", reportingPeriod),
						new SqlParameter("@prevQtrYear", reportingYear)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					dataEntryPointsDTO = new DataEntryPointsDTO();
					dataEntryPointsDTO.DS_ID = Conversions.ToInteger(sqlDataReader.GetValue(0));
					dataEntryPointsDTO.ReportingYear = Conversions.ToInteger(sqlDataReader.GetValue(1));
					dataEntryPointsDTO.XValue = Conversions.ToInteger(sqlDataReader.GetValue(2));
					dataEntryPointsDTO.PointsDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)));
					bool flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)));
					decimal? num;
					if (flag)
					{
						DataEntryPointsDTO dataEntryPointsDTO2 = dataEntryPointsDTO;
						object value = sqlDataReader.GetValue(4);
						dataEntryPointsDTO2.YValue = ((value != null) ? ((decimal?)value) : num);
					}
					dataEntryPointsDTO.Reviewed = Conversions.ToBoolean(sqlDataReader.GetValue(5));
					dataEntryPointsDTO.CentrallyManaged = Conversions.ToBoolean(sqlDataReader.GetValue(6));
					dataEntryPointsDTO.AllowEditTargets = Conversions.ToBoolean(sqlDataReader.GetValue(7));
					dataEntryPointsDTO.HierarchyID = Conversions.ToInteger(sqlDataReader.GetValue(8));
					dataEntryPointsDTO.DataSeriesDescription = Conversions.ToString(sqlDataReader.GetValue(9));
					dataEntryPointsDTO.DataSeriesHeading = dataEntryPointsDTO.DataSeriesDescription;
					DataEntryPointsDTO dataEntryPointsDTO3 = dataEntryPointsDTO;
					object obj = DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					dataEntryPointsDTO3.PreviousYValue = ((obj != null) ? ((decimal?)obj) : num);
					dataEntryPointsDTO.Level = DBNullConversions.DBNullToNA(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)));
					dataEntryPointsDTO.PreviousLevel = DBNullConversions.DBNullToNA(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)));
					dataEntryPointsDTO.Analysis = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13)));
					dataEntryPointsDTO.PreviousAnalysis = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14)));
					dataEntryPointsDTO.ChartID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15)));
					dataEntryPointsDTO.MonthlyLevel = DBNullConversions.DBNullToNA(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16)));
					dataEntryPointsDTO.PreviousMonthlyLevel = DBNullConversions.DBNullToNA(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17)));
					list.Add(dataEntryPointsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000111 RID: 273 RVA: 0x0000D760 File Offset: 0x0000B960
		public static List<DataEntryPointsDTO> GetDataEntryMyMetricPointsInfo(string month, int year, string userID)
		{
			DataEntryPointsDTO dataEntryPointsDTO = new DataEntryPointsDTO();
			CriteriaDTO prevReportingPeriod = myConversions.GetPrevReportingPeriod(month, year);
			string text = "Select\tDistinct b.DS_ID,        e.Reporting_Year,        e.x,        e.Description as PtDesc,        e.Y,        e.Reviewed,        a.CentrallyManaged,        a.AllowEditTargets,        -1 as H_ID,        b.Description as DsDesc,        pe.Y,        dbo.udf_PerfLevel(Max(Case b.Description When 'MINIMUM' Then e.Y End),Max(Case b.Description When 'TARGET' Then e.Y End),Max(Case b.Description When 'MAXIMUM' Then e.Y End),Max(Case b.Description When 'YTD' Then e.Y End), a.Inverse_Scale) as YTD_Level,        dbo.udf_PerfLevel(Max(Case b.Description When 'MINIMUM' Then pe.Y End),Max(Case b.Description When 'TARGET' Then pe.Y End),Max(Case b.Description When 'MAXIMUM' Then pe.Y End),Max(Case b.Description When 'YTD' Then pe.Y End), a.Inverse_Scale) as YTD_Level_Prev,        f.Comments,        pf.Comments,        a.Chart_ID,        dbo.udf_PerfLevel(Max(Case b.Description When 'MONTHLY MINIMUM' Then e.Y End),Max(Case b.Description When 'MONTHLY TARGET' Then e.Y End),Max(Case b.Description When 'MONTHLY MAXIMUM' Then e.Y End),Max(Case b.Description When 'MONTHLY' Then e.Y End), a.Inverse_Scale) as MTD_Level,        dbo.udf_PerfLevel(Max(Case b.Description When 'MONTHLY MINIMUM' Then pe.Y End),Max(Case b.Description When 'MONTHLY TARGET' Then pe.Y End),Max(Case b.Description When 'MONTHLY MAXIMUM' Then pe.Y End),Max(Case b.Description When 'MONTHLY' Then pe.Y End), a.Inverse_Scale) as MTD_Level_Prev,        '' as DashboardName,        a.C_ID,         a.Chart_Name,        Max(Case When a.PrimaryDataProvider = @UserID or a.BackupDataProvider = @UserID Then 1 Else 0 End) as DP,         Max(Case When cp.UserID = @UserID Then 1 Else 0 End) as CP  From\tt_UPM_Charts as a Join t_UPM_Data_Series as b On a.C_ID = b.C_ID and b.Description in ('YTD','Monthly','PE') \t\tJoin t_upm_points as e On b.DS_ID = e.DS_ID and e.Reporting_Year = @ReportingYear and e.Description = @ReportingMonth \t\tJoin t_upm_points as pe On b.DS_ID = pe.DS_ID and pe.Reporting_Year = @PrevReportingYear and pe.Description = @PrevReportingMonth \t\tJoin dbo.t_web_UserDashboardCharts as c On a.C_ID = c.C_ID and c.DashboardName is Not Null  \t\tLeft Join dbo.t_web_UserDashboardSharing as d On c.DashboardName = d.DashboardName and c.UserID = d.UserID \t\tLeft Join t_UPM_ChartCommentProviders as cp On a.C_ID = cp.C_ID \t\tLeft Join dbo.T_WEB_PM_SUMMARY_COMMENTS as f On a.Chart_ID = f.Chart_ID and e.Reporting_Year = f.Reporting_Year and e.Description = f.Mo_Qtr \t\tLeft Join dbo.T_WEB_PM_SUMMARY_COMMENTS as pf On a.Chart_ID = pf.Chart_ID and e.Reporting_Year = pf.Reporting_Year and e.Description = pf.Mo_Qtr Where\t(a.PrimaryDataProvider = @userID or a.BackupDataProvider = @UserID or (cp.UserID = @UserID and cp.UserID is not null)) Group By \tb.DS_ID, \t\t    e.Reporting_Year,    \t\te.x,    \t\te.Description,    \t\te.Y,    \t\tpe.Y,    \t\te.Reviewed,    \t\ta.CentrallyManaged,    \t\ta.AllowEditTargets,    \t\tb.Description, \t    \tc.DashboardName,    \t\ta.C_ID,     \t\ta.Chart_Name,    \t\ta.Chart_ID,    \t\ta.Inverse_Scale,    \t\tf.Comments,            pf.Comments ";
			List<DataEntryPointsDTO> list = new List<DataEntryPointsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<DataEntryPointsDTO> list2;
			try
			{
				sqlConnection.Open();
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@ReportingMonth", month),
						new SqlParameter("@ReportingYear", year),
						new SqlParameter("@PrevReportingMonth", prevReportingPeriod.ReportingPeriod),
						new SqlParameter("@PrevReportingYear", prevReportingPeriod.ReportingYear),
						new SqlParameter("@userID", userID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					dataEntryPointsDTO = new DataEntryPointsDTO();
					dataEntryPointsDTO.DS_ID = Conversions.ToInteger(sqlDataReader.GetValue(0));
					dataEntryPointsDTO.ReportingYear = Conversions.ToInteger(sqlDataReader.GetValue(1));
					dataEntryPointsDTO.XValue = Conversions.ToInteger(sqlDataReader.GetValue(2));
					dataEntryPointsDTO.PointsDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)));
					bool flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)));
					decimal? num;
					if (flag)
					{
						DataEntryPointsDTO dataEntryPointsDTO2 = dataEntryPointsDTO;
						object value = sqlDataReader.GetValue(4);
						dataEntryPointsDTO2.YValue = ((value != null) ? ((decimal?)value) : num);
					}
					dataEntryPointsDTO.Reviewed = Conversions.ToBoolean(sqlDataReader.GetValue(5));
					dataEntryPointsDTO.CentrallyManaged = Conversions.ToBoolean(sqlDataReader.GetValue(6));
					dataEntryPointsDTO.AllowEditTargets = Conversions.ToBoolean(sqlDataReader.GetValue(7));
					dataEntryPointsDTO.HierarchyID = Conversions.ToInteger(sqlDataReader.GetValue(8));
					dataEntryPointsDTO.DataSeriesDescription = Conversions.ToString(sqlDataReader.GetValue(9));
					dataEntryPointsDTO.DataSeriesHeading = dataEntryPointsDTO.DataSeriesDescription;
					DataEntryPointsDTO dataEntryPointsDTO3 = dataEntryPointsDTO;
					object obj = DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					dataEntryPointsDTO3.PreviousYValue = ((obj != null) ? ((decimal?)obj) : num);
					dataEntryPointsDTO.Level = DBNullConversions.DBNullToNA(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)));
					dataEntryPointsDTO.PreviousLevel = DBNullConversions.DBNullToNA(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)));
					dataEntryPointsDTO.Analysis = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13)));
					dataEntryPointsDTO.PreviousAnalysis = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14)));
					dataEntryPointsDTO.ChartID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15)));
					dataEntryPointsDTO.MonthlyLevel = DBNullConversions.DBNullToNA(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16)));
					dataEntryPointsDTO.PreviousMonthlyLevel = DBNullConversions.DBNullToNA(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17)));
					dataEntryPointsDTO.DataEditable = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21)));
					dataEntryPointsDTO.CommentsEditable = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22)));
					list.Add(dataEntryPointsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000112 RID: 274 RVA: 0x0000DAE8 File Offset: 0x0000BCE8
		public static List<string> GetSystemChartIDs()
		{
			List<string> list = new List<string>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<string> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select Distinct System_Chart_ID From dbo.T_WEB_STATIC_JURISDICTIONAL_CHART_ID order By System_Chart_ID";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(Conversions.ToString(sqlDataReader.GetValue(0)));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000113 RID: 275 RVA: 0x0000DBB4 File Offset: 0x0000BDB4
		public static List<JurisdictionChartIDsDTO> GetJurisdictionChartIDs()
		{
			return PerfMgDB.GetJurisdictionChartIDs("", "");
		}

		// Token: 0x06000114 RID: 276 RVA: 0x0000DBD8 File Offset: 0x0000BDD8
		public static List<JurisdictionChartIDsDTO> GetJurisdictionChartIDs(string systemChartID)
		{
			return PerfMgDB.GetJurisdictionChartIDs(systemChartID, "");
		}

		// Token: 0x06000115 RID: 277 RVA: 0x0000DBF8 File Offset: 0x0000BDF8
		public static List<JurisdictionChartIDsDTO> GetJurisdictionChartIDs(string systemChartID, string jurisdiction)
		{
			JurisdictionChartIDsDTO jurisdictionChartIDsDTO = new JurisdictionChartIDsDTO();
			List<JurisdictionChartIDsDTO> list = new List<JurisdictionChartIDsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<JurisdictionChartIDsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_WEB_Static_Jurisdictional_Chart_IDs_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(systemChartID, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@System_Chart_ID", systemChartID));
				}
				flag = Operators.CompareString(jurisdiction, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@Jurisdiction_ID", jurisdiction));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new JurisdictionChartIDsDTO
					{
						SystemChartID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						JurisdictionChartID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						JurisdictionID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000116 RID: 278 RVA: 0x000022CE File Offset: 0x000004CE
		public static void SaveJurisdictionChartIDs(JurisdictionChartIDsDTO data)
		{
			PerfMgDB.SetJurisdictionChartIDs("S", data);
		}

		// Token: 0x06000117 RID: 279 RVA: 0x000022DE File Offset: 0x000004DE
		public static void DeleteJurisdictionChartIDs(JurisdictionChartIDsDTO data)
		{
			PerfMgDB.SetJurisdictionChartIDs("D", data);
		}

		// Token: 0x06000118 RID: 280 RVA: 0x0000DD84 File Offset: 0x0000BF84
		private static void SetJurisdictionChartIDs(string operation, JurisdictionChartIDsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_WEB_Static_Jurisdictional_Chart_IDs_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@System_Chart_ID", data.SystemChartID),
						new SqlParameter("@Jurisdiction_Chart_ID", data.JurisdictionChartID),
						new SqlParameter("@Jurisdiction_ID", data.JurisdictionID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000119 RID: 281 RVA: 0x0000DE88 File Offset: 0x0000C088
		public static List<UPMBenchmarkDTO> GetBenchmarkData(int year)
		{
			List<UPMBenchmarkDTO> list = new List<UPMBenchmarkDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<UPMBenchmarkDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "select \tbms.SurveyName,         bmm.bmMetricName,        bmm.bmMetricDescription,        bmm.LexiconID,        bmm.YearEndOnly,        bmbp.bmSurveyYear,        bmbp.bmReportingYear,        bmbp.bmTopDecile,        bmbp.bmFirstQuartile,        bmbp.bmSecondQuartile,        bmbp.bmThirdQuartile FROM t_UPM_BenchmarkSurvey bms JOIN t_UPM_BenchmarkMetrics bmm ON bmm.SurveyID = bms.SurveyIDJOIN t_UPM_BenchmarkBreakPoints bmbp ON bmbp.bmID = bmm.bmIDwhere  bmReportingYear = @Reporting_Year order by SurveyName ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Reporting_Year", year)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new UPMBenchmarkDTO
					{
						SurveyName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						MetricDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						LexiconID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						YearEndOnly = Conversions.ToBoolean(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))),
						SurveyYear = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)))),
						ReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6)))),
						TopDecile = DBNullConversions.DBNullToDecimal(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						Quartile1 = DBNullConversions.DBNullToDecimal(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						Quartile2 = DBNullConversions.DBNullToDecimal(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						Quartile3 = DBNullConversions.DBNullToDecimal(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600011A RID: 282 RVA: 0x000022EE File Offset: 0x000004EE
		public static void SaveBenchmarkData(UPMBenchmarkDTO data)
		{
			PerfMgDB.SetBenchmarkData("S", data);
		}

		// Token: 0x0600011B RID: 283 RVA: 0x0000E0A8 File Offset: 0x0000C2A8
		private static void SetBenchmarkData(string operation, UPMBenchmarkDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_BenchmarkData_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@bmID", data.BenchmarkID),
						new SqlParameter("@SurveyID", data.SurveyYear),
						new SqlParameter("@SurveyName", data.SurveyName),
						new SqlParameter("@MetricName", data.MetricName),
						new SqlParameter("@MetricDescription", data.MetricDescription),
						new SqlParameter("@LexiconID", data.LexiconID),
						new SqlParameter("@YearEndOnly", data.YearEndOnly),
						new SqlParameter("@Reporting_Year", data.ReportingYear),
						new SqlParameter("@TopDecile", data.TopDecile),
						new SqlParameter("@FirstQuartile", data.Quartile1),
						new SqlParameter("@SecondQuartile", data.Quartile2),
						new SqlParameter("@ThirdQuartile", data.Quartile3)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600011C RID: 284 RVA: 0x0000E2E4 File Offset: 0x0000C4E4
		public static List<PMContactDTO> GetPMContacts()
		{
			List<PMContactDTO> list = new List<PMContactDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<PMContactDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_PM_Contacts_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					PMContactDTO pmcontactDTO = new PMContactDTO();
					pmcontactDTO.PMContactID = Conversions.ToString(sqlDataReader.GetValue(0));
					pmcontactDTO.PMContactName = Conversions.ToString(sqlDataReader.GetValue(1));
					pmcontactDTO.PMContactPhone = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)));
					pmcontactDTO.PMContactFax = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)));
					pmcontactDTO.PMContactPager = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)));
					pmcontactDTO.PMContactMail = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					pmcontactDTO.PMSortOrder = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))));
					pmcontactDTO.Active = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)));
					pmcontactDTO.CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8)));
					pmcontactDTO.ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)));
					pmcontactDTO.ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					bool flag = Operators.CompareString(pmcontactDTO.Active, "Y", false) == 0;
					if (flag)
					{
						list.Add(pmcontactDTO);
					}
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600011D RID: 285 RVA: 0x0000E4EC File Offset: 0x0000C6EC
		public static int GetManagedByTypeByCID(int cID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				string text = "Select ManagedByID from t_UPM_Charts where c_ID = @cID";
				num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@cID", cID)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x0600011E RID: 286 RVA: 0x0000E5AC File Offset: 0x0000C7AC
		public static List<PMManagedByDTO> GetManagedBywSelect()
		{
			List<PMManagedByDTO> list = new List<PMManagedByDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<PMManagedByDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ManagedBywSelect_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new PMManagedByDTO
					{
						ManagedByID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ManagedByDesc = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600011F RID: 287 RVA: 0x0000E69C File Offset: 0x0000C89C
		public static List<PMManagedByDTO> GetManagedBy()
		{
			List<PMManagedByDTO> list = new List<PMManagedByDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<PMManagedByDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ManagedBy_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new PMManagedByDTO
					{
						ManagedByID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ManagedByDesc = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000120 RID: 288 RVA: 0x0000E78C File Offset: 0x0000C98C
		public static List<LexiconDTO> GetLexiconOwner()
		{
			List<LexiconDTO> list = new List<LexiconDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LexiconDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ManagedBy_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LexiconDTO
					{
						ManagedByID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ManagedByDesc = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000121 RID: 289 RVA: 0x000022FE File Offset: 0x000004FE
		public static void SaveLexicons(LexiconDTO data)
		{
			PerfMgDB.SetLexicons("S", data);
		}

		// Token: 0x06000122 RID: 290 RVA: 0x0000230E File Offset: 0x0000050E
		public static void DeleteLexicons(LexiconDTO data)
		{
			PerfMgDB.SetLexicons("D", data);
		}

		// Token: 0x06000123 RID: 291 RVA: 0x0000E87C File Offset: 0x0000CA7C
		private static void SetLexicons(string operation, LexiconDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_Lexicons_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@LexiconID", data.LexiconID),
						new SqlParameter("@KPIDescription", data.KPIDescription),
						new SqlParameter("@KPIFormula", data.KPIFormula),
						new SqlParameter("@MeasurementIntent", data.MeasurementIntent),
						new SqlParameter("@KPIDefinition", data.KPIDefinition),
						new SqlParameter("@Active", data.Active),
						new SqlParameter("@LexiconOwnerUserID", data.LexiconOwnerUserID),
						new SqlParameter("@ManagedByID", data.ManagedByID),
						new SqlParameter("@ReportingYear", data.ReportingYear),
						new SqlParameter("@UpdateFlag", data.UpdateFlag),
						new SqlParameter("@TargetSettingApproach", data.TargetSettingApproach),
						new SqlParameter("@Notes", data.Notes),
						new SqlParameter("@UserID", data.CreatedBy),
						new SqlParameter("@@UserID", data.ChangedBy),
						new SqlParameter("@ChangeDate", data.ChangedDate)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000124 RID: 292 RVA: 0x0000EB08 File Offset: 0x0000CD08
		public static List<LexiconDTO> GetLexicons()
		{
			List<LexiconDTO> list = new List<LexiconDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LexiconDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select LexiconID, KPIDescription, CAST(LexiconID As Varchar) + ' -- ' + KPIDescription As LexiconConcat From t_upm_Lexicons where active = 1 Order By LexiconID, KPIDescription";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LexiconDTO
					{
						LexiconID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						KPIDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						LexiconConcat = Conversions.ToString(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000125 RID: 293 RVA: 0x0000EC10 File Offset: 0x0000CE10
		public static List<LexiconDTO> GetLexicons(int reportingYear)
		{
			return PerfMgDB.GetLexicons(reportingYear, -1);
		}

		// Token: 0x06000126 RID: 294 RVA: 0x0000EC2C File Offset: 0x0000CE2C
		public static List<LexiconDTO> GetLexiconsByYear(int reportingYear, int lexiconID)
		{
			List<LexiconDTO> list = new List<LexiconDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LexiconDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_Lexicons_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = lexiconID > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@LexiconID", lexiconID));
				}
				sqlCommand.Parameters.Add(new SqlParameter("@ReportingYear", reportingYear));
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LexiconDTO
					{
						LexiconID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						KPIDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						Notes = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						KPIFormula = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						TargetSettingApproach = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						MeasurementIntent = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						KPIDefinition = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						UpdateFlag = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						ReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)))),
						Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12))),
						LexiconOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						ManagedByID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14)))),
						ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000127 RID: 295 RVA: 0x0000EC2C File Offset: 0x0000CE2C
		public static List<LexiconDTO> GetLexicons(int reportingYear, int lexiconID)
		{
			List<LexiconDTO> list = new List<LexiconDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LexiconDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_Lexicons_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = lexiconID > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@LexiconID", lexiconID));
				}
				sqlCommand.Parameters.Add(new SqlParameter("@ReportingYear", reportingYear));
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LexiconDTO
					{
						LexiconID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						KPIDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						Notes = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						KPIFormula = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						TargetSettingApproach = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						MeasurementIntent = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						KPIDefinition = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						UpdateFlag = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10))),
						ChangedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						ReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)))),
						Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12))),
						LexiconOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						ManagedByID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14)))),
						ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000128 RID: 296 RVA: 0x0000EEE4 File Offset: 0x0000D0E4
		public static List<LexiconDTO> GetLexiconActivity(int reportingYear, int lexiconID, string workgroupID)
		{
			List<LexiconDTO> list = new List<LexiconDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LexiconDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_LexiconActivity_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ReportingYear", reportingYear),
						new SqlParameter("@LexiconID", lexiconID),
						new SqlParameter("@WorkgroupID", workgroupID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LexiconDTO
					{
						LexiconID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						KPIDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						Notes = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						KPIFormula = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						TargetSettingApproach = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						MeasurementIntent = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						KPIDefinition = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						UpdateFlag = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))),
						CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						ChangedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						ChangedDate = Conversions.ToDate(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)))),
						ReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11)))),
						Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12))),
						LexiconOwnerUserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))),
						ManagedByID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000129 RID: 297 RVA: 0x0000231E File Offset: 0x0000051E
		public static void SaveUPMLexicons(LexiconDTO data)
		{
			PerfMgDB.SetUPMLexicons("S", data);
		}

		// Token: 0x0600012A RID: 298 RVA: 0x0000232E File Offset: 0x0000052E
		public static void DeleteUPMLexicons(LexiconDTO data)
		{
			PerfMgDB.SetUPMLexicons("D", data);
		}

		// Token: 0x0600012B RID: 299 RVA: 0x0000F198 File Offset: 0x0000D398
		internal static SqlCommand CreateSaveLexiconsRequest(string operation, LexiconDTO data)
		{
			return new SqlCommand("dbo.usp_UPM_Lexicons_set")
			{
				CommandType = CommandType.StoredProcedure,
				Parameters = 
				{
					new SqlParameter("@Operation", operation),
					new SqlParameter("@LexiconID", data.LexiconID),
					new SqlParameter("@KPIDescription", data.KPIDescription),
					new SqlParameter("@KPIFormulas", data.KPIFormula),
					new SqlParameter("@MeasurementIntent", data.MeasurementIntent),
					new SqlParameter("@KPIDefinition", data.KPIDefinition),
					new SqlParameter("@Active", data.Active),
					new SqlParameter("@LexiconOwnerUserID", data.LexiconOwnerUserID),
					new SqlParameter("@ManagedByID", data.ManagedByID),
					new SqlParameter("@ReportingYear", data.ReportingYear),
					new SqlParameter("@UpdateFlag", data.UpdateFlag),
					new SqlParameter("@TargetSettingApproach", data.TargetSettingApproach),
					new SqlParameter("@Notes", data.Notes),
					new SqlParameter("@UserID", data.CreatedBy),
					new SqlParameter("@ChangedBy", data.ChangedBy),
					new SqlParameter("@ChangeDate", data.ChangedDate)
				}
			};
		}

		// Token: 0x0600012C RID: 300 RVA: 0x0000F398 File Offset: 0x0000D598
		private static int SetUPMLexicons(string operation, LexiconDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSaveLexiconsRequest(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x0600012D RID: 301 RVA: 0x0000F434 File Offset: 0x0000D634
		private static int SetMetricSummary(UPMPointsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSaveMetricSummaryRequest(data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x0600012E RID: 302 RVA: 0x0000F4D0 File Offset: 0x0000D6D0
		public static SqlCommand CreateSaveMetricSummaryRequest(UPMPointsDTO data)
		{
			SqlCommand sqlCommand = new SqlCommand("dbo.usp_UPM_Chart_Summary_set");
			sqlCommand.CommandType = CommandType.StoredProcedure;
			bool flag = Information.IsNothing(data.DSID);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DS_ID));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@DS_ID", data.DSID));
			}
			sqlCommand.Parameters.Add(new SqlParameter("@Reporting_Year", data.ReportingYear));
			flag = Information.IsNothing(data.MonthDesc);
			if (flag)
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Reporting_Period", data.PointsDescription));
			}
			else
			{
				sqlCommand.Parameters.Add(new SqlParameter("@Reporting_Period", data.MonthDesc));
			}
			return sqlCommand;
		}

		// Token: 0x0600012F RID: 303 RVA: 0x0000F5B8 File Offset: 0x0000D7B8
		public static void DeleteScorecardSummary(string month, int year)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "Delete From dbo.T_UPM_Scorecard_Summary Where Year = @Year and Month = dbo.udf_MonthSortOrder(@Month)";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Year", year),
						new SqlParameter("@Month", month)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000130 RID: 304 RVA: 0x0000F684 File Offset: 0x0000D884
		public static void LoadScorecardSummary(string month, int year)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "Insert Into dbo.T_UPM_Scorecard_Summary Select @Year, dbo.udf_MonthSortOrder(@Month), * From dbo.v_upm_HierarchyScorecard";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Year", year),
						new SqlParameter("@Month", month)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000131 RID: 305 RVA: 0x0000F750 File Offset: 0x0000D950
		public static Dictionary<int, int> GetTargetTrackingHierarchyByChart()
		{
			Dictionary<int, int> dictionary = new Dictionary<int, int>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			Dictionary<int, int> dictionary2;
			try
			{
				sqlConnection.Open();
				string text = "Select \tb.fkID, Min(a.H_ID) From \tt_upm_hierarchy_names as a Join t_upm_hierarchy_nodes as b on a.H_ID = b.H_ID and a.TargetTrackingInd = 1 and b.NodeTypeID = 6 Group By b.fkID Order By b.fkID ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					int num = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))));
					int num2 = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))));
					dictionary.Add(num, num2);
				}
				dictionary2 = dictionary;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return dictionary2;
		}

		// Token: 0x06000132 RID: 306 RVA: 0x0000F848 File Offset: 0x0000DA48
		public static List<HierarchyNameDTO> GetTargetTrackingHierarchy()
		{
			List<HierarchyNameDTO> list = new List<HierarchyNameDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<HierarchyNameDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select H_ID, Name From t_upm_hierarchy_names Where TargetTrackingInd = 1";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new HierarchyNameDTO
					{
						HierarchyID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						HierarchyName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000133 RID: 307 RVA: 0x0000F948 File Offset: 0x0000DB48
		public static object GetPMSecurityVersion()
		{
			return PerfMgDB.GetPMSecurityVersion(false);
		}

		// Token: 0x06000134 RID: 308 RVA: 0x0000F960 File Offset: 0x0000DB60
		public static List<VersionDTO> GetPMSecurityVersion(bool currentRevision)
		{
			List<VersionDTO> list = new List<VersionDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<VersionDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_Version_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = !Information.IsNothing(currentRevision);
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@CurrentRevision", currentRevision));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new VersionDTO
					{
						MajorRevision = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						MinorRevision = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						BuildNumber = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						CurrentRevision = Conversions.ToBoolean(sqlDataReader.GetValue(3)),
						Comments = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000135 RID: 309 RVA: 0x0000233E File Offset: 0x0000053E
		public static void SaveSecurityVersion(VersionDTO data)
		{
			PerfMgDB.SetSecurityVersion("S", data);
		}

		// Token: 0x06000136 RID: 310 RVA: 0x0000234E File Offset: 0x0000054E
		public static void DeleteSecurityVersion(VersionDTO data)
		{
			PerfMgDB.SetSecurityVersion("D", data);
		}

		// Token: 0x06000137 RID: 311 RVA: 0x0000FAE0 File Offset: 0x0000DCE0
		private static void SetSecurityVersion(string operation, VersionDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_Version_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@MajorRevision", data.MajorRevision),
						new SqlParameter("@MinorRevision", data.MinorRevision),
						new SqlParameter("@BuildNumber", data.BuildNumber),
						new SqlParameter("@Comments", data.Comments)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000138 RID: 312 RVA: 0x0000FC10 File Offset: 0x0000DE10
		public static List<LinearOrgDTO> GetLinearOrgDirectReports(string userID, int year, int month)
		{
			return PerfMgDB.GetLinearOrgDirectReports(userID, year, month, -1);
		}

		// Token: 0x06000139 RID: 313 RVA: 0x0000FC2C File Offset: 0x0000DE2C
		public static List<LinearOrgDTO> GetLinearOrgDirectReports(string userID, bool active)
		{
			return PerfMgDB.GetLinearOrgDirectReports(userID, 0, 0, (-((active > false) ? 1 : 0)) ? 1 : 0);
		}

		// Token: 0x0600013A RID: 314 RVA: 0x0000FC4C File Offset: 0x0000DE4C
		private static List<LinearOrgDTO> GetLinearOrgDirectReports(string userID, int year, int month, int active)
		{
			List<LinearOrgDTO> list = new List<LinearOrgDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LinearOrgDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_inc_LinearOrgDirectReports_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.Parameters.Add(new SqlParameter("@UserID", userID));
				bool flag = year > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@LinearYear", year));
				}
				flag = month > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@LinearMonth", month));
				}
				flag = active > -1;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@Active", active));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(PerfMgDB.PopulateLinearOrg(sqlDataReader));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600013B RID: 315 RVA: 0x0000FDA0 File Offset: 0x0000DFA0
		public static List<LinearOrgDTO> GetLinearOrg(int year, int month)
		{
			return PerfMgDB.GetLinearOrg(year, month, string.Empty, string.Empty);
		}

		// Token: 0x0600013C RID: 316 RVA: 0x0000FDC4 File Offset: 0x0000DFC4
		public static List<LinearOrgDTO> GetLinearOrg(string workgroupID)
		{
			return PerfMgDB.GetLinearOrg(0, 0, workgroupID, string.Empty);
		}

		// Token: 0x0600013D RID: 317 RVA: 0x0000FDE4 File Offset: 0x0000DFE4
		public static List<LinearOrgDTO> GetLinearOrg()
		{
			return PerfMgDB.GetLinearOrg(0, 0, string.Empty, string.Empty);
		}

		// Token: 0x0600013E RID: 318 RVA: 0x0000FE08 File Offset: 0x0000E008
		public static List<LinearOrgDTO> GetLinearOrg(int year, int month, string workgroupID)
		{
			return PerfMgDB.GetLinearOrg(year, month, workgroupID, string.Empty);
		}

		// Token: 0x0600013F RID: 319 RVA: 0x0000FE28 File Offset: 0x0000E028
		public static List<LinearOrgDTO> GetLinearOrg(int year, int month, string workgroupID, string safetyWorkgroupID)
		{
			List<LinearOrgDTO> list = new List<LinearOrgDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LinearOrgDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_inc_LinearOrg_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = year > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@LinearYear", year));
				}
				flag = month > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@LinearMonth", month));
				}
				flag = Operators.CompareString(workgroupID, string.Empty, false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@WorkgroupID", workgroupID));
				}
				flag = Operators.CompareString(safetyWorkgroupID, string.Empty, false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@SafetyWorkgroupID", safetyWorkgroupID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(PerfMgDB.PopulateLinearOrg(sqlDataReader));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000140 RID: 320 RVA: 0x0000FFB0 File Offset: 0x0000E1B0
		private static LinearOrgDTO PopulateLinearOrg(SqlDataReader dr)
		{
			LinearOrgDTO linearOrgDTO = new LinearOrgDTO();
			linearOrgDTO.LinearYear = Conversions.ToInteger(dr.GetValue(0));
			linearOrgDTO.LinearMonth = Conversions.ToInteger(dr.GetValue(1));
			linearOrgDTO.LineNumber = Conversions.ToInteger(dr.GetValue(2));
			linearOrgDTO.OpGroup = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(3)));
			linearOrgDTO.Department = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(4)));
			linearOrgDTO.WorkgroupID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(5)));
			linearOrgDTO.EntergyLoginID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(6)));
			linearOrgDTO.LinearName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(7)));
			linearOrgDTO.Name = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(8)));
			linearOrgDTO.EmployeeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(9)));
			linearOrgDTO.HRPCode = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(10)));
			linearOrgDTO.JobTitle = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(11)));
			linearOrgDTO.OrgDepartmentID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(12)));
			linearOrgDTO.OrgDepartmentName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(13)));
			linearOrgDTO.ManagerName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(14)));
			linearOrgDTO.ManagerHRPCode = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(15)));
			linearOrgDTO.ManagerLevel = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(dr.GetValue(16))));
			linearOrgDTO.Grade = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(17)));
			linearOrgDTO.HRIncentivePlan = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(18)));
			linearOrgDTO.PayoutTargetPercent = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(dr.GetValue(19)));
			linearOrgDTO.JobCode = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(20)));
			linearOrgDTO.Company = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(21)));
			linearOrgDTO.State = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(22)));
			linearOrgDTO.WorkPhone = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(23)));
			linearOrgDTO.MailUnit = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(24)));
			linearOrgDTO.Site = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(25)));
			linearOrgDTO.UnionCode = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(26)));
			linearOrgDTO.ServiceYearsFull = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(dr.GetValue(27))));
			linearOrgDTO.ServiceYears = DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(dr.GetValue(28)));
			linearOrgDTO.FSLAState = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(29)));
			linearOrgDTO.StockOptionCode = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(30)));
			linearOrgDTO.Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(dr.GetValue(31)));
			bool flag = dr.FieldCount > 35;
			if (flag)
			{
				linearOrgDTO.SafetyWorkgroupID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(32)));
				linearOrgDTO.NumberEmployees = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(dr.GetValue(33))));
				linearOrgDTO.ServiceDate = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(34)));
				linearOrgDTO.EmployeeType = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(35)));
				linearOrgDTO.InternalPhone = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(36)));
				linearOrgDTO.ExternalPhone = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(37)));
				linearOrgDTO.ccName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(38)));
				linearOrgDTO.Reg = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(39)));
				linearOrgDTO.FullTimeOrPartTime = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(40)));
				linearOrgDTO.WorkAddress1 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(41)));
				linearOrgDTO.WorkAddress2 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(42)));
				linearOrgDTO.WorkCity = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(43)));
				linearOrgDTO.WorkZip = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(44)));
				linearOrgDTO.ManagerJobTitle = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(45)));
				linearOrgDTO.ManagerMailUnit = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(46)));
				linearOrgDTO.P1 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(47)));
				linearOrgDTO.P2 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(48)));
				linearOrgDTO.P3 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(49)));
				linearOrgDTO.P4 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(50)));
				linearOrgDTO.P5 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(51)));
				linearOrgDTO.P6 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(52)));
				linearOrgDTO.P7 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(53)));
				linearOrgDTO.P8 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(54)));
				linearOrgDTO.P9 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(55)));
				linearOrgDTO.P10 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(56)));
				linearOrgDTO.P11 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(57)));
				linearOrgDTO.P12 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(58)));
				linearOrgDTO.P13 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(59)));
				linearOrgDTO.P14 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(60)));
				linearOrgDTO.P15 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(61)));
				linearOrgDTO.P16 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(62)));
				linearOrgDTO.P17 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(63)));
				linearOrgDTO.P18 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(64)));
				linearOrgDTO.P19 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(65)));
				linearOrgDTO.P20 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(66)));
				linearOrgDTO.P21 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(67)));
				linearOrgDTO.P22 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(68)));
				linearOrgDTO.P23 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(69)));
				linearOrgDTO.P24 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(70)));
				linearOrgDTO.P25 = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(71)));
				linearOrgDTO.CreatedBy = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(dr.GetValue(72)));
				linearOrgDTO.CreatedDate = DBNullConversions.DBNullToNoDate(RuntimeHelpers.GetObjectValue(dr.GetValue(73)));
			}
			return linearOrgDTO;
		}

		// Token: 0x06000141 RID: 321 RVA: 0x0000235E File Offset: 0x0000055E
		public static void SaveLinearOrg(LinearOrgDTO item)
		{
			PerfMgDB.SetLinearOrg("S", item);
		}

		// Token: 0x06000142 RID: 322 RVA: 0x0001070C File Offset: 0x0000E90C
		public static void DeleteLinearOrg(int year, int month)
		{
			PerfMgDB.SetLinearOrg("D", new LinearOrgDTO
			{
				LinearYear = year,
				LinearMonth = month
			});
		}

		// Token: 0x06000143 RID: 323 RVA: 0x00010740 File Offset: 0x0000E940
		public static void InactivateLinearOrg()
		{
			LinearOrgDTO linearOrgDTO = new LinearOrgDTO();
			PerfMgDB.SetLinearOrg("I", linearOrgDTO);
		}

		// Token: 0x06000144 RID: 324 RVA: 0x00010764 File Offset: 0x0000E964
		private static void SetLinearOrg(string operation, LinearOrgDTO item)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_inc_LinearOrg_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@LinearYear", item.LinearYear),
						new SqlParameter("@LinearMonth", item.LinearMonth),
						new SqlParameter("@LineNum", item.LineNumber),
						new SqlParameter("@OpGroup", item.OpGroup),
						new SqlParameter("@Department", item.Department),
						new SqlParameter("@WorkgroupID", item.WorkgroupID),
						new SqlParameter("@EntergyLoginID", item.EntergyLoginID),
						new SqlParameter("@Name_", item.LinearName),
						new SqlParameter("@Name", item.Name),
						new SqlParameter("@EmployeeID", item.EmployeeID),
						new SqlParameter("@HRPCode", item.HRPCode),
						new SqlParameter("@JobTitle", item.JobTitle),
						new SqlParameter("@OrgDeptID", item.OrgDepartmentID),
						new SqlParameter("@OrgDeptName", item.OrgDepartmentName),
						new SqlParameter("@ManagerName", item.ManagerName),
						new SqlParameter("@ManagerHRPCode", item.ManagerHRPCode),
						new SqlParameter("@ManagerLevel", item.ManagerLevel),
						new SqlParameter("@Grade", item.Grade),
						new SqlParameter("@HRPlanCode", item.HRIncentivePlan),
						new SqlParameter("@TargetPct", item.PayoutTargetPercent),
						new SqlParameter("@JobCode", item.JobCode),
						new SqlParameter("@Company", item.Company),
						new SqlParameter("@State", item.State),
						new SqlParameter("@WorkPhone", item.WorkPhone),
						new SqlParameter("@MailUnit", item.MailUnit),
						new SqlParameter("@Site", item.Site),
						new SqlParameter("@UnionCode", item.UnionCode),
						new SqlParameter("@FullServiceYears", item.ServiceYearsFull),
						new SqlParameter("@ServiceYears", item.ServiceYears),
						new SqlParameter("@FLSAState", item.FSLAState),
						new SqlParameter("@StockOptionCode", item.StockOptionCode),
						new SqlParameter("@UserID", Environment.UserName),
						new SqlParameter("@SafetyWorkgroupID", item.SafetyWorkgroupID),
						new SqlParameter("@NumberEmployees", item.NumberEmployees),
						new SqlParameter("@ServiceDate", item.ServiceDate),
						new SqlParameter("@EmpType", item.EmployeeType),
						new SqlParameter("@InternalPhone", item.InternalPhone),
						new SqlParameter("@ExternalPhone", item.ExternalPhone),
						new SqlParameter("@ccName", item.ccName),
						new SqlParameter("@Reg", item.Reg),
						new SqlParameter("@FT_PT", item.FullTimeOrPartTime),
						new SqlParameter("@WorkAddress1", item.WorkAddress1),
						new SqlParameter("@WorkAddress2", item.WorkAddress2),
						new SqlParameter("@WorkCity", item.WorkCity),
						new SqlParameter("@WorkZip", item.WorkZip),
						new SqlParameter("@ManagerJobTitle", item.ManagerJobTitle),
						new SqlParameter("@ManagerMailUnit", item.ManagerMailUnit),
						new SqlParameter("@P1", item.P1),
						new SqlParameter("@P2", item.P2),
						new SqlParameter("@P3", item.P3),
						new SqlParameter("@P4", item.P4),
						new SqlParameter("@P5", item.P5),
						new SqlParameter("@P6", item.P6),
						new SqlParameter("@P7", item.P7),
						new SqlParameter("@P8", item.P8),
						new SqlParameter("@P9", item.P9),
						new SqlParameter("@P10", item.P10),
						new SqlParameter("@P11", item.P11),
						new SqlParameter("@P12", item.P12),
						new SqlParameter("@P13", item.P13),
						new SqlParameter("@P14", item.P14),
						new SqlParameter("@P15", item.P15),
						new SqlParameter("@P16", item.P16),
						new SqlParameter("@P17", item.P17),
						new SqlParameter("@P18", item.P18),
						new SqlParameter("@P19", item.P19),
						new SqlParameter("@P20", item.P20),
						new SqlParameter("@P21", item.P21),
						new SqlParameter("@P22", item.P22),
						new SqlParameter("@P23", item.P23),
						new SqlParameter("@P24", item.P24),
						new SqlParameter("@P25", item.P25)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000145 RID: 325 RVA: 0x00011034 File Offset: 0x0000F234
		public static List<LinearOrgChangeDTO> GetLinearOrgChanges(int year, int month)
		{
			List<LinearOrgChangeDTO> list = new List<LinearOrgChangeDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LinearOrgChangeDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_inc_LinearOrgChanges_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ChangeYear", year),
						new SqlParameter("@ChangeMonth", month)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LinearOrgChangeDTO
					{
						LinearChangeID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ChangeYear = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						ChangeMonth = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						ChangeLineNumber = Conversions.ToInteger(sqlDataReader.GetValue(3)),
						ChangeDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						ChangeValue = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))),
						PreviousYear = Conversions.ToInteger(sqlDataReader.GetValue(6)),
						PreviousMonth = Conversions.ToInteger(sqlDataReader.GetValue(7)),
						PreviousLineNumber = Conversions.ToInteger(sqlDataReader.GetValue(8)),
						PreviousValue = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						EmployeeName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10))),
						Department = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11))),
						JobTitle = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000146 RID: 326 RVA: 0x0000236E File Offset: 0x0000056E
		public static void SaveLinearOrgChange(LinearOrgChangeDTO item)
		{
			PerfMgDB.SetLinearOrgChange("S", item);
		}

		// Token: 0x06000147 RID: 327 RVA: 0x00011270 File Offset: 0x0000F470
		public static void DeleteLinearOrgChange(int year, int month)
		{
			PerfMgDB.SetLinearOrgChange("D", new LinearOrgChangeDTO
			{
				ChangeYear = year,
				ChangeMonth = month
			});
		}

		// Token: 0x06000148 RID: 328 RVA: 0x000112A4 File Offset: 0x0000F4A4
		private static void SetLinearOrgChange(string operation, LinearOrgChangeDTO item)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_inc_LinearOrgChanges_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@ChangeYear", item.ChangeYear),
						new SqlParameter("@ChangeMonth", item.ChangeMonth),
						new SqlParameter("@ChangeLineNum", item.ChangeLineNumber),
						new SqlParameter("@ChangeDescription", item.ChangeDescription),
						new SqlParameter("@ChangeValue", item.ChangeValue),
						new SqlParameter("@PreviousYear", item.PreviousYear),
						new SqlParameter("@PreviousMonth", item.PreviousMonth),
						new SqlParameter("@PreviousLineNum", item.PreviousLineNumber),
						new SqlParameter("@PreviousValue", item.PreviousValue),
						new SqlParameter("@EmployeeName", item.EmployeeName)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000149 RID: 329 RVA: 0x000114A4 File Offset: 0x0000F6A4
		public static List<LinearOrgChangeDTO> GetLinearOrgWorkgroupsToCheck(int year, int month)
		{
			List<LinearOrgChangeDTO> list = new List<LinearOrgChangeDTO>();
			string text = "Select AA.LineNum, BB.WorkgroupID as BeforeWorkgroup, AA.WorkgroupID as Workgroup,  CC.WorkgroupID as AfterWorkgroup From (select LineNum, WorkgroupID from t_inc_LinearOrg where LinearYear = @LinearYear and LinearMonth = @LinearMonth) as AA Join (select LineNum, WorkgroupID from t_inc_LinearOrg where LinearYear = @LinearYear and LinearMonth = @LinearMonth) as BB On AA.LineNum = BB.LineNum + 1 Join (select LineNum, WorkgroupID from t_inc_LinearOrg where LinearYear = @LinearYear and LinearMonth = @LinearMonth) as CC On AA.LineNum = CC.LineNum - 1 Where AA.WorkgroupID <> BB.WorkGroupID and AA.WorkgroupID <> CC.WorkgroupID and BB.WorkgroupID <> 'N/A' ";
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LinearOrgChangeDTO> list2;
			try
			{
				sqlConnection.Open();
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@LinearYear", year),
						new SqlParameter("@LinearMonth", month)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LinearOrgChangeDTO
					{
						LinearChangeID = 0,
						ChangeYear = year,
						ChangeMonth = month,
						ChangeLineNumber = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ChangeDescription = "New Workgroup",
						ChangeValue = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						PreviousValue = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600014A RID: 330 RVA: 0x0001162C File Offset: 0x0000F82C
		public static List<LinearOrgLongestPositionDTO> GetLinearOrgLongestPosition(int year)
		{
			List<LinearOrgLongestPositionDTO> list = new List<LinearOrgLongestPositionDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LinearOrgLongestPositionDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_inc_LinearOrgLongestPosition_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@year", year)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LinearOrgLongestPositionDTO
					{
						EmployeeID = Conversions.ToString(sqlDataReader.GetValue(0)),
						HRPCode = Conversions.ToString(sqlDataReader.GetValue(1)),
						PositionMonths = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						LinearYear = year
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600014B RID: 331 RVA: 0x00011754 File Offset: 0x0000F954
		public static List<LinearOrgLongestPositionDTO> GetLinearOrgTieBreaker(int year)
		{
			List<LinearOrgLongestPositionDTO> list = new List<LinearOrgLongestPositionDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LinearOrgLongestPositionDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_inc_LinearOrgTieBreaker_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@year", year)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LinearOrgLongestPositionDTO
					{
						LinearYear = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						EmployeeID = Conversions.ToString(sqlDataReader.GetValue(1)),
						HRPCode = Conversions.ToString(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600014C RID: 332 RVA: 0x0000237E File Offset: 0x0000057E
		public static void SaveLinearTieBreaker(LinearOrgLongestPositionDTO item)
		{
			PerfMgDB.SetLinearOrgTieBreaker("S", item);
		}

		// Token: 0x0600014D RID: 333 RVA: 0x0000238E File Offset: 0x0000058E
		public static void DeleteLinearTieBreaker(LinearOrgLongestPositionDTO item)
		{
			PerfMgDB.SetLinearOrgTieBreaker("D", item);
		}

		// Token: 0x0600014E RID: 334 RVA: 0x00011874 File Offset: 0x0000FA74
		private static void SetLinearOrgTieBreaker(string operation, LinearOrgLongestPositionDTO item)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_inc_LinearOrgTieBreaker_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@Year", item.LinearYear),
						new SqlParameter("@EmployeeID", item.EmployeeID),
						new SqlParameter("@HRPCode", item.HRPCode)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600014F RID: 335 RVA: 0x0001197C File Offset: 0x0000FB7C
		public static List<IncentiveSafetySummaryDTO> GetLinearOrgDistinctEmployeeID(int year)
		{
			List<IncentiveSafetySummaryDTO> list = new List<IncentiveSafetySummaryDTO>();
			string text = "Select \tAA.LinearYear,        AA.EmployeeID,        AA.WorkgroupID From (Select EmployeeID, LinearMonth, LinearYear, WorkgroupID From   t_inc_LinearOrg Where  LinearYear = @year) as AA Join (Select EmployeeID, Max(LinearMonth) as LinearMonth, LinearYear From   t_inc_LinearOrg Where  LinearYear = @year Group By EmployeeID, LinearYear) as BB On AA.EmployeeID = BB.EmployeeID and AA.LinearMonth = BB.LinearMonth and AA.LinearYear = BB.LinearYear Order By AA.EmployeeID ";
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<IncentiveSafetySummaryDTO> list2;
			try
			{
				sqlConnection.Open();
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@year", year)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					IncentiveSafetySummaryDTO incentiveSafetySummaryDTO = new IncentiveSafetySummaryDTO();
					incentiveSafetySummaryDTO.Year = Conversions.ToInteger(sqlDataReader.GetValue(0));
					incentiveSafetySummaryDTO.EmployeeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)));
					incentiveSafetySummaryDTO.WorkgroupID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)));
					bool flag = (Operators.CompareString(incentiveSafetySummaryDTO.EmployeeID, string.Empty, false) != 0) & (Operators.CompareString(incentiveSafetySummaryDTO.EmployeeID.Trim(), "", false) != 0);
					if (flag)
					{
						list.Add(incentiveSafetySummaryDTO);
					}
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000150 RID: 336 RVA: 0x00011B00 File Offset: 0x0000FD00
		public static List<IncentiveSafetySummaryDTO> GetLinearOrgEmployeeWorkgroup(int year)
		{
			List<IncentiveSafetySummaryDTO> list = new List<IncentiveSafetySummaryDTO>();
			string text = "Select \tBB.EmployeeID,        BB.HRPCode,        BB.WorkgroupID,        Case When CC.EmployeeID is Null Then 0 Else 1 End as PersonalTag,        Case When DD.EmployeeID is Null Then 0 Else 1 End as VehicleTag,        Case When EE.HRPCode is Null Then 0 Else 1 End as Exempt,        Coalesce(BB.Risk, 'L') as Risk,        BB.TagType From (Select EmployeeID, HRPCode, Max(LinearMonth) as LinearMonth from t_INC_LinearOrg Where LinearYear = @year Group By EmployeeID, HRPCode, LinearYear) as AA Join (Select a.EmployeeID, a.HRPCode, a.LinearMonth, a.WorkgroupID, b.Risk, b.TagType from t_INC_LinearOrg as a Left Join t_inc_SafetyWorkgroup as b On a.SafetyWorkgroupID = b.SafetyWorkgroupID Where LinearYear = @year) as BB On AA.EmployeeID = BB.EmployeeID and AA.LinearMonth = BB.LinearMonth and AA.HRPCode = BB.HRPCode Left Join (Select a.EmployeeID From t_inc_SafetyAccidentTagged as a Join t_inc_SafetyAccident as b On a.AccidentID = b.AccidentID Where AccidentYear = @year and b.AccidentType = 'Personal') as CC  On AA.EmployeeID = CC.EmployeeID Left Join (Select a.EmployeeID From t_inc_SafetyAccidentTagged as a Join t_inc_SafetyAccident as b On a.AccidentID = b.AccidentID Where AccidentYear = @year and b.AccidentType = 'Vehicle') as DD On AA.EmployeeID = DD.EmployeeID Left Join t_inc_SafetyWorkgroupExempt as EE On AA.HRPCode = EE.HRPCode Order By BB.EmployeeID ";
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<IncentiveSafetySummaryDTO> list2;
			try
			{
				sqlConnection.Open();
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@year", year)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new IncentiveSafetySummaryDTO
					{
						Year = year,
						EmployeeID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						EmployeeLongestPosition = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						WorkgroupID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						PersonalAccidentTag = Conversions.ToBoolean(sqlDataReader.GetValue(3)),
						VehicleAccidentTag = Conversions.ToBoolean(sqlDataReader.GetValue(4)),
						Exempt = Conversions.ToBoolean(sqlDataReader.GetValue(5)),
						Risk = Conversions.ToString(sqlDataReader.GetValue(6)),
						TaggingMethodology = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000151 RID: 337 RVA: 0x00011CB8 File Offset: 0x0000FEB8
		public static string GetLinearOrgName(string userID)
		{
			bool flag = (Operators.CompareString(userID, string.Empty, false) == 0) | (Operators.CompareString(userID, "", false) == 0);
			string text;
			if (flag)
			{
				text = string.Empty;
			}
			else
			{
				SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
				try
				{
					sqlConnection.Open();
					string text2 = "Select Name From t_inc_LinearOrg Where Active = 1 and EntergyLoginID = @UserID";
					string text3 = Conversions.ToString(new SqlCommand(text2, sqlConnection)
					{
						CommandType = CommandType.Text,
						Parameters = 
						{
							new SqlParameter("@UserID", userID)
						}
					}.ExecuteScalar());
					text = text3;
				}
				catch (Exception ex)
				{
					throw new Exception(ex.Message);
				}
				finally
				{
					flag = sqlConnection.State == ConnectionState.Open;
					if (flag)
					{
						sqlConnection.Close();
					}
					sqlConnection.Dispose();
				}
			}
			return text;
		}

		// Token: 0x06000152 RID: 338 RVA: 0x00011DA4 File Offset: 0x0000FFA4
		public static bool IsEmployeeWithCompany(string employeeID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				string text = "select count(*) from t_inc_linearOrg where active = 1 and EmployeeID = @EmployeeID";
				bool flag = Operators.ConditionalCompareObjectEqual(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@EmployeeID", employeeID)
					}
				}.ExecuteScalar(), 0, false);
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x06000153 RID: 339 RVA: 0x00011E74 File Offset: 0x00010074
		public static List<MetricTypeDTO> GetMetricType()
		{
			return PerfMgDB.GetMetricType(string.Empty);
		}

		// Token: 0x06000154 RID: 340 RVA: 0x00011E90 File Offset: 0x00010090
		public static List<MetricTypeDTO> GetMetricType(string metricTypeID)
		{
			MetricTypeDTO metricTypeDTO = new MetricTypeDTO();
			List<MetricTypeDTO> list = new List<MetricTypeDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricTypeDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricType_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(metricTypeID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@MetricTypeID", metricTypeID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					metricTypeDTO = new MetricTypeDTO();
					metricTypeDTO.MetricTypeID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))));
					metricTypeDTO.MetricTypeName = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))));
					metricTypeDTO.MetricTypeDesc = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))));
					metricTypeDTO.TechnicalDesc = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))));
					metricTypeDTO.PatternID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))));
					metricTypeDTO.UnitID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))));
					metricTypeDTO.UnitDisplayInd = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))));
					metricTypeDTO.DecimalPlaces = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7))));
					metricTypeDTO.RollUpTypeCd = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))));
					metricTypeDTO.ActualsColumn = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))));
					metricTypeDTO.TargetColumn = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10))));
					metricTypeDTO.UserDefColumn1 = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(11))));
					metricTypeDTO.UserDefColumn2 = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(12))));
					metricTypeDTO.UserDefColumn3 = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(13))));
					metricTypeDTO.UserDefColumn4 = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(14))));
					metricTypeDTO.UserDefColumn5 = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(15))));
					MetricTypeDTO metricTypeDTO2 = metricTypeDTO;
					object obj = DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(16)));
					decimal? num;
					metricTypeDTO2.GraphYAxisMin = ((obj != null) ? ((decimal?)obj) : num);
					MetricTypeDTO metricTypeDTO3 = metricTypeDTO;
					object obj2 = DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(17)));
					metricTypeDTO3.GraphYAxisMax = ((obj2 != null) ? ((decimal?)obj2) : num);
					metricTypeDTO.GraphIncZero = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(18))));
					metricTypeDTO.ScoreType = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(19))));
					metricTypeDTO.OwnerID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(20))));
					metricTypeDTO.CreateDate = Conversions.ToDate(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(21))));
					metricTypeDTO.CreateUserID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(22))));
					metricTypeDTO.ChangeDate = Conversions.ToDate(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(23))));
					metricTypeDTO.ChangeUserID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(24))));
					metricTypeDTO.SortOrder = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(25))));
					metricTypeDTO.ExportToMS = Conversions.ToBoolean(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(26))));
					metricTypeDTO.ActualsSource = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(27))));
					metricTypeDTO.UnRollUpYTDValue = Conversions.ToBoolean(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(28))));
					metricTypeDTO.ToleranceType = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(29))));
					metricTypeDTO.CubeName = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(30))));
					metricTypeDTO.MeasureName = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(31))));
					metricTypeDTO.TimeDimName = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(32))));
					metricTypeDTO.HomeScorecardHID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(33))));
					metricTypeDTO.PeriodID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(34))));
					list.Add(metricTypeDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000155 RID: 341 RVA: 0x0000239E File Offset: 0x0000059E
		public static void SaveMetricType(MetricTypeDTO data)
		{
			PerfMgDB.SetMetricType("S", data);
		}

		// Token: 0x06000156 RID: 342 RVA: 0x000023AE File Offset: 0x000005AE
		public static void DeleteMetricType(MetricTypeDTO data)
		{
			PerfMgDB.SetMetricType("D", data);
		}

		// Token: 0x06000157 RID: 343 RVA: 0x000123D8 File Offset: 0x000105D8
		private static void SetMetricType(string operation, MetricTypeDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricType_set";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.Parameters.Add(new SqlParameter("@Operation", operation));
				sqlCommand.Parameters.Add(new SqlParameter("@MetricTypeID", data.MetricTypeID));
				sqlCommand.Parameters.Add(new SqlParameter("@MetricTypeName", data.MetricTypeName));
				sqlCommand.Parameters.Add(new SqlParameter("@MetricTypeDesc", data.MetricTypeDesc));
				sqlCommand.Parameters.Add(new SqlParameter("@TechnicalDesc", data.TechnicalDesc));
				sqlCommand.Parameters.Add(new SqlParameter("@PatternID", data.PatternID));
				sqlCommand.Parameters.Add(new SqlParameter("@UnitID", data.UnitID));
				sqlCommand.Parameters.Add(new SqlParameter("@UnitDisplayInd", data.UnitDisplayInd));
				sqlCommand.Parameters.Add(new SqlParameter("@DecimalPlaces", data.DecimalPlaces));
				sqlCommand.Parameters.Add(new SqlParameter("@RollUpTypeCd", data.RollUpTypeCd));
				sqlCommand.Parameters.Add(new SqlParameter("@PeriodID", data.PeriodID));
				sqlCommand.Parameters.Add(new SqlParameter("@ActualsColumn", data.ActualsColumn));
				sqlCommand.Parameters.Add(new SqlParameter("@TargetColumn", data.TargetColumn));
				bool flag = Operators.CompareString(data.UserDefColumn1, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserDefColumn1", data.UserDefColumn1));
				}
				flag = Operators.CompareString(data.UserDefColumn2, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserDefColumn2", data.UserDefColumn2));
				}
				flag = Operators.CompareString(data.UserDefColumn3, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserDefColumn3", data.UserDefColumn3));
				}
				flag = Operators.CompareString(data.UserDefColumn4, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserDefColumn4", data.UserDefColumn4));
				}
				flag = Operators.CompareString(data.UserDefColumn5, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserDefColumn5", data.UserDefColumn5));
				}
				sqlCommand.Parameters.Add(new SqlParameter("@GraphYAxisMin", data.GraphYAxisMin));
				sqlCommand.Parameters.Add(new SqlParameter("@GraphYAxisMax", data.GraphYAxisMax));
				sqlCommand.Parameters.Add(new SqlParameter("@GraphIncZero", data.GraphIncZero));
				sqlCommand.Parameters.Add(new SqlParameter("@ScoreType", data.ScoreType));
				sqlCommand.Parameters.Add(new SqlParameter("@OwnerID", data.OwnerID));
				sqlCommand.Parameters.Add(new SqlParameter("@UserID", data.UserID));
				sqlCommand.Parameters.Add(new SqlParameter("@SortOrder", data.SortOrder));
				sqlCommand.Parameters.Add(new SqlParameter("@ExportToMS", data.ExportToMS));
				sqlCommand.Parameters.Add(new SqlParameter("@ActualsSource", data.ActualsSource));
				sqlCommand.Parameters.Add(new SqlParameter("@UnRollUpYTDValue", data.UnRollUpYTDValue));
				sqlCommand.Parameters.Add(new SqlParameter("@ToleranceType", data.ToleranceType));
				sqlCommand.Parameters.Add(new SqlParameter("@CubeName", data.CubeName));
				sqlCommand.Parameters.Add(new SqlParameter("@MeasureName", data.MeasureName));
				sqlCommand.Parameters.Add(new SqlParameter("@TimeDimName", data.TimeDimName));
				sqlCommand.Parameters.Add(new SqlParameter("@HomeScorecardHID", data.HomeScorecardHID));
				sqlCommand.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000158 RID: 344 RVA: 0x000023BE File Offset: 0x000005BE
		public static void SaveMetricTypeFamily(MetricTypeFamilyDTO data)
		{
			PerfMgDB.SetMetricTypeFamily("S", data);
		}

		// Token: 0x06000159 RID: 345 RVA: 0x000023CE File Offset: 0x000005CE
		public static void DeleteMetricTypeFamily(MetricTypeFamilyDTO data)
		{
			PerfMgDB.SetMetricTypeFamily("D", data);
		}

		// Token: 0x0600015A RID: 346 RVA: 0x000128C4 File Offset: 0x00010AC4
		private static void SetMetricTypeFamily(string operation, MetricTypeFamilyDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricTypeFamily_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@MetricFamilyID", data.MetricFamilyID),
						new SqlParameter("@MetricTypeID", data.MetricTypeID),
						new SqlParameter("@MainFamilyInd", data.MainFamilyInd)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600015B RID: 347 RVA: 0x000129CC File Offset: 0x00010BCC
		public static List<MetricTypeQualifierDTO> GetMetricTypeQualifier(string metricTypeID)
		{
			MetricTypeQualifierDTO metricTypeQualifierDTO = new MetricTypeQualifierDTO();
			List<MetricTypeQualifierDTO> list = new List<MetricTypeQualifierDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricTypeQualifierDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricTypeQualifier_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@MetricTypeID", metricTypeID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricTypeQualifierDTO
					{
						MetricQualifierID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						MQName = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))),
						MetricTypeID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						MetricTypeDesc = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600015C RID: 348 RVA: 0x000023DE File Offset: 0x000005DE
		public static void SaveMetricTypeQualifier(MetricTypeQualifierDTO data)
		{
			PerfMgDB.SetMetricTypeQualifier("S", data);
		}

		// Token: 0x0600015D RID: 349 RVA: 0x000023EE File Offset: 0x000005EE
		public static void DeleteMetricTypeQualifier(MetricTypeQualifierDTO data)
		{
			PerfMgDB.SetMetricTypeQualifier("D", data);
		}

		// Token: 0x0600015E RID: 350 RVA: 0x00012B30 File Offset: 0x00010D30
		private static void SetMetricTypeQualifier(string operation, MetricTypeQualifierDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricTypeQualifier_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@MetricQualifierID", data.MetricQualifierID),
						new SqlParameter("@MetricTypeID", data.MetricTypeID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600015F RID: 351 RVA: 0x00012C18 File Offset: 0x00010E18
		public static List<MetricQualifierDTO> GetMetricQualifier()
		{
			return PerfMgDB.GetMetricQualifier(string.Empty);
		}

		// Token: 0x06000160 RID: 352 RVA: 0x00012C34 File Offset: 0x00010E34
		public static List<MetricQualifierDTO> GetMetricQualifier(string metricQualifierID)
		{
			MetricQualifierDTO metricQualifierDTO = new MetricQualifierDTO();
			List<MetricQualifierDTO> list = new List<MetricQualifierDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricQualifierDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricQualifier_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(metricQualifierID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@MetricQualifierID", metricQualifierID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricQualifierDTO
					{
						MetricQualifierID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						MQName = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))),
						MQDesc = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						MQTechnicalDesc = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						ChangedDate = Conversions.ToDate(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000161 RID: 353 RVA: 0x00012DE4 File Offset: 0x00010FE4
		public static List<MetricTypePatternDTO> GetMetricTypePattern()
		{
			MetricTypePatternDTO metricTypePatternDTO = new MetricTypePatternDTO();
			List<MetricTypePatternDTO> list = new List<MetricTypePatternDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricTypePatternDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricTypePattern_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricTypePatternDTO
					{
						PatternID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						PatternName = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000162 RID: 354 RVA: 0x000023FE File Offset: 0x000005FE
		public static void SaveMetricQualifier(MetricQualifierDTO data)
		{
			PerfMgDB.SetMetricQualifier("S", data);
		}

		// Token: 0x06000163 RID: 355 RVA: 0x0000240E File Offset: 0x0000060E
		public static void DeleteMetricQualifier(MetricQualifierDTO data)
		{
			PerfMgDB.SetMetricQualifier("D", data);
		}

		// Token: 0x06000164 RID: 356 RVA: 0x00012EF0 File Offset: 0x000110F0
		private static void SetMetricQualifier(string operation, MetricQualifierDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricQualifier_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@MetricQualifierID", data.MetricQualifierID),
						new SqlParameter("@MQName", data.MQName),
						new SqlParameter("@MQDesc", data.MQDesc),
						new SqlParameter("@MQTechnicalDesc", data.MQTechnicalDesc)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000165 RID: 357 RVA: 0x00013010 File Offset: 0x00011210
		public static List<MetricLevelDTO> GetMetricLevel()
		{
			return PerfMgDB.GetMetricLevel(string.Empty);
		}

		// Token: 0x06000166 RID: 358 RVA: 0x0001302C File Offset: 0x0001122C
		public static List<MetricLevelDTO> GetMetricLevel(string metricLevelID)
		{
			MetricLevelDTO metricLevelDTO = new MetricLevelDTO();
			List<MetricLevelDTO> list = new List<MetricLevelDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricLevelDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricLevel_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(metricLevelID, string.Empty, false) != 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@LevelID", metricLevelID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricLevelDTO
					{
						LevelID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						Level = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))),
						LevelCode = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						LevelDescription = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						OwnerID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))),
						HRPCode = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000167 RID: 359 RVA: 0x000131F8 File Offset: 0x000113F8
		public static List<MetricLevelDTO> GetMetricLevelByLevelType(string levelType)
		{
			MetricLevelDTO metricLevelDTO = new MetricLevelDTO();
			List<MetricLevelDTO> list = new List<MetricLevelDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricLevelDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "SELECT LevelID,Level,LevelCode,LevelDescription,OwnerUserID,ChangedDate,HRPCode FROM dbo.t_upm_MetricLevel Where Level = @Level";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@Level", levelType)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricLevelDTO
					{
						LevelID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						Level = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))),
						LevelCode = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						LevelDescription = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						OwnerID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))),
						HRPCode = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000168 RID: 360 RVA: 0x000133AC File Offset: 0x000115AC
		public static List<MetricLevelDTO> GetMetricLevelsbyMetricType(string metricID)
		{
			MetricLevelDTO metricLevelDTO = new MetricLevelDTO();
			List<MetricLevelDTO> list = new List<MetricLevelDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<MetricLevelDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricLevelsbyMetricType_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@MetricTypeID", metricID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new MetricLevelDTO
					{
						LevelID = Conversions.ToInteger(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						Level = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))),
						LevelCode = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						LevelDescription = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						OwnerID = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))),
						HRPCode = Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000169 RID: 361 RVA: 0x00013560 File Offset: 0x00011760
		public static List<string> GetMetricLevelDescbyMetricType(string metricTypeID)
		{
			List<string> list = new List<string>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<string> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricLevelDescbyMetricType_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@MetricTypeID", metricTypeID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600016A RID: 362 RVA: 0x00013650 File Offset: 0x00011850
		public static List<string> GetMetricLevelTypes()
		{
			List<string> list = new List<string>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<string> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select distinct Level From t_upm_MetricLevel";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(Conversions.ToString(DBNullConversions.DBNullToValue(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600016B RID: 363 RVA: 0x00013728 File Offset: 0x00011928
		public static void SaveMetricLevel(MetricLevelDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_MetricLevel_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", "S"),
						new SqlParameter("@LevelID", data.LevelID),
						new SqlParameter("@Level", data.Level),
						new SqlParameter("@LevelCode", data.LevelCode),
						new SqlParameter("@LevelDescription", data.LevelDescription),
						new SqlParameter("@OwnerUserID", data.OwnerID),
						new SqlParameter("@HRPCode", data.HRPCode)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600016C RID: 364 RVA: 0x000138A0 File Offset: 0x00011AA0
		public static List<ScorecardOperatingCompanyDTO> GetScorecardOperatingCompany()
		{
			return PerfMgDB.GetScorecardOperatingCompany(string.Empty, 0);
		}

		// Token: 0x0600016D RID: 365 RVA: 0x000138C0 File Offset: 0x00011AC0
		public static List<ScorecardOperatingCompanyDTO> GetScorecardOperatingCompany(string area)
		{
			return PerfMgDB.GetScorecardOperatingCompany(area, 0);
		}

		// Token: 0x0600016E RID: 366 RVA: 0x000138DC File Offset: 0x00011ADC
		public static List<ScorecardOperatingCompanyDTO> GetScorecardOperatingCompany(int opCoID)
		{
			return PerfMgDB.GetScorecardOperatingCompany(string.Empty, opCoID);
		}

		// Token: 0x0600016F RID: 367 RVA: 0x000138FC File Offset: 0x00011AFC
		public static List<ScorecardOperatingCompanyDTO> GetScorecardOperatingCompany(string area, int opCoID)
		{
			ScorecardOperatingCompanyDTO scorecardOperatingCompanyDTO = new ScorecardOperatingCompanyDTO();
			List<ScorecardOperatingCompanyDTO> list = new List<ScorecardOperatingCompanyDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardOperatingCompanyDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Scorecard_OperatingCompany_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(area, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@Area", area));
				}
				flag = opCoID > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@OpCo_ID", opCoID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardOperatingCompanyDTO
					{
						Area = Conversions.ToString(sqlDataReader.GetValue(0)),
						OperatingCompany = Conversions.ToString(sqlDataReader.GetValue(1)),
						Title = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						ShowExecutiveSummary = Conversions.ToBoolean(sqlDataReader.GetValue(3)),
						ShowDashboard = Conversions.ToBoolean(sqlDataReader.GetValue(4)),
						ShowCharts = Conversions.ToBoolean(sqlDataReader.GetValue(5)),
						ShowScorecards = true,
						OpCoID = Conversions.ToInteger(sqlDataReader.GetValue(6)),
						ScorecardOwner = Conversions.ToString(sqlDataReader.GetValue(7))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000170 RID: 368 RVA: 0x00013AE4 File Offset: 0x00011CE4
		public static List<HierarchyNameDTO> GetHierarchyByStrategy(int strategyID)
		{
			List<HierarchyNameDTO> list = new List<HierarchyNameDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<HierarchyNameDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select \ta.H_ID, a.Name, a.Active  From \tdbo.T_UPM_Hierarchy_Names as a Join dbo.T_UPM_Hierarchy_TypeName as b On a.H_ID = b.H_ID \t    Join dbo.T_UPM_Hierarchy_Nodes as c On a.H_ID = c.H_ID Where \tc.fkID = @StrategyID and c.NodeTypeID = 28 and b.TypeID = 1 and a.Active = 1 ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@StrategyID", strategyID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new HierarchyNameDTO
					{
						HierarchyID = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						HierarchyName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						HierarchyActive = Conversions.ToBoolean(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000171 RID: 369 RVA: 0x00013C1C File Offset: 0x00011E1C
		public static List<StrategyDTO> GetStrategyByHierarchy(int hID)
		{
			List<StrategyDTO> list = new List<StrategyDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<StrategyDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select \td.StrategyID, d.StrategyDesc, d.StrategyGroup, d.Active  From \tdbo.T_UPM_Hierarchy_Names as a Join dbo.T_UPM_Hierarchy_TypeName as b On a.H_ID = b.H_ID \t    Join dbo.T_UPM_Hierarchy_Nodes as c On a.H_ID = c.H_ID \t    Join t_scorecard_Strategy as d On c.fkID = d.StrategyID and d.Active = 1 Where \tc.NodeTypeID = 28 and a.H_ID = @HID ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@HID", hID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new StrategyDTO
					{
						StrategyID = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						StrategyGroup = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						StrategyGroup = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						Active = Conversions.ToBoolean(DBNullConversions.DBNullToNothing(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000172 RID: 370 RVA: 0x00013D70 File Offset: 0x00011F70
		public static List<FocusAreaGoalsDTO> GetGoalsByHierarchy(int hID)
		{
			List<FocusAreaGoalsDTO> list = new List<FocusAreaGoalsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<FocusAreaGoalsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select \td.GoalDesc, d.GoalOwner, d.ReportFormat, d.OrderSeq, d.ReportTitle, d.Confidential, d.WebPath, d.Active, d.GoalID, d.GoalAbbrev  From \tdbo.T_UPM_Hierarchy_Names as a Join dbo.T_UPM_Hierarchy_TypeName as b On a.H_ID = b.H_ID  and b.TypeID = 1\t    Join dbo.T_UPM_Hierarchy_Nodes as c On a.H_ID = c.H_ID \t    Join t_scorecard_Goals as d On c.fkID = d.GoalID and d.Active = 1 Where \tc.NodeTypeID = 2 and a.H_ID = @HID Order By OrderSeq ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@HID", hID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new FocusAreaGoalsDTO
					{
						GoalDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						GoalOwner = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ReportFormat = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						OrderSequence = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						ReportTitle = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						Confidential = Convert.ToBoolean(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)))),
						WebPath = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(6))),
						Active = Convert.ToBoolean(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(7)))),
						GoalID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8)))),
						GoalAbbreviation = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000173 RID: 371 RVA: 0x00013F7C File Offset: 0x0001217C
		public static List<FocusAreaDTO> GetFocusAreasByHierarchy(int hID)
		{
			List<FocusAreaDTO> list = new List<FocusAreaDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<FocusAreaDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select \td.FocusAreaID, d.FocusAreaDesc, d.OrderSeq, d.FA_ID, d.Active, d.FocusAreaAbbrev  From \tdbo.T_UPM_Hierarchy_Names as a Join dbo.T_UPM_Hierarchy_TypeName as b On a.H_ID = b.H_ID and b.TypeID = 1\t    Join dbo.T_UPM_Hierarchy_Nodes as c On a.H_ID = c.H_ID \t    Join t_scorecard_FocusAreas as d On c.fkID = d.FA_ID and d.Active = 1 Where \tc.NodeTypeID = 1 and a.H_ID = @HID Order By OrderSeq ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@HID", hID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new FocusAreaDTO
					{
						FocusAreaID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						FocusAreaDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						OrderSequence = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						FA_ID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						Active = Convert.ToBoolean(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))),
						FocusAreaAbbreviation = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000174 RID: 372 RVA: 0x00014120 File Offset: 0x00012320
		public static List<ScorecardOperatingCompanyDTO> GetScorecardOpCosByStrategy(int strategyID)
		{
			List<ScorecardOperatingCompanyDTO> list = new List<ScorecardOperatingCompanyDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardOperatingCompanyDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select \tDistinct e.Area, e.OperatingCompany, e.Owner, e.OpCo_ID, e.OpCoShortDesc, e.Seq  From \tdbo.T_UPM_Hierarchy_Names as a Join dbo.T_UPM_Hierarchy_TypeName as b On a.H_ID = b.H_ID and b.TypeID = 1 \t    Join dbo.T_UPM_Hierarchy_Nodes as c On a.H_ID = c.H_ID and c.NodeTypeID = 28 and c.fkID = @StrategyID \t    Join dbo.T_UPM_Hierarchy_Nodes as d On c.H_ID = d.H_ID and d.NodeTypeID = 3        Join t_scorecard_OperatingCompany as e On d.fkID = e.OpCo_ID Order By e.Seq ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@StrategyID", strategyID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardOperatingCompanyDTO
					{
						Area = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						OperatingCompany = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ScorecardOwner = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						OpCoID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						ShortDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000175 RID: 373 RVA: 0x000142A4 File Offset: 0x000124A4
		public static List<ScorecardOperatingCompanyDTO> GetScorecardOpCos(int hID)
		{
			List<ScorecardOperatingCompanyDTO> list = new List<ScorecardOperatingCompanyDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardOperatingCompanyDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select \tDistinct e.Area, e.OperatingCompany, e.Owner, e.OpCo_ID, e.OpCoShortDesc, Seq  From \tdbo.T_UPM_Hierarchy_Names as a Join dbo.T_UPM_Hierarchy_TypeName as b On a.H_ID = b.H_ID and b.TypeID = 1 \t    Join dbo.T_UPM_Hierarchy_Nodes as c On a.H_ID = c.H_ID and c.NodeTypeID = 1 and c.H_ID = @H_ID \t    Join dbo.T_UPM_Hierarchy_Nodes as d On c.H_ID = d.H_ID and d.NodeTypeID = 3        Join t_scorecard_OperatingCompany as e On d.fkID = e.OpCo_ID Order By Seq ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@H_ID", hID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardOperatingCompanyDTO
					{
						Area = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						OperatingCompany = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ScorecardOwner = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))),
						OpCoID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						ShortDescription = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000176 RID: 374 RVA: 0x00014428 File Offset: 0x00012628
		public static List<HierarchyNameDTO> GetScorecardsByStrategy(int strategyID)
		{
			List<HierarchyNameDTO> list = new List<HierarchyNameDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<HierarchyNameDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select \ta.H_ID, a.Name, a.Active  From \tdbo.T_UPM_Hierarchy_Names as a Join dbo.T_UPM_Hierarchy_TypeName as b On a.H_ID = b.H_ID and b.TypeID = 1 and a.Active = 1 \t    Join dbo.T_UPM_Hierarchy_Nodes as c On a.H_ID = c.H_ID and c.NodeTypeID = 28 and c.fkID = @StrategyID \t    Join dbo.T_UPM_Hierarchy_Nodes as d On c.H_ID = d.H_ID and d.NodeTypeID = 2        Join t_scorecard_Goals as e On d.fkID = e.GoalID Order By OrderSeq ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@StrategyID", strategyID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new HierarchyNameDTO
					{
						HierarchyID = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0)))),
						HierarchyName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						HierarchyActive = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000177 RID: 375 RVA: 0x0001455C File Offset: 0x0001275C
		public static List<IncentivesDTO> GetIncentive(int cID, int reportyear)
		{
			List<IncentivesDTO> list = new List<IncentivesDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<IncentivesDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select\ta.C_ID,        a.ReportingYear,        a.ActiveIncentive, From\tt_INC_Charts as a Where\ta.C_ID = @CID and a.ReportingYear = @ReportingYear ";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.Text;
				bool flag = cID > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@C_ID", cID));
				}
				sqlCommand.Parameters.Add(new SqlParameter("@ReportingYear", reportyear));
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new IncentivesDTO
					{
						C_ID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ReportingYear = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)))),
						ActiveIncentive = Conversions.ToBoolean(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000178 RID: 376 RVA: 0x000146B8 File Offset: 0x000128B8
		public static void SaveComments(CommentsDTO dto)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_save_summary_comments";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@C_ID", dto.cID),
						new SqlParameter("@ReportingYear", dto.ReportingYear),
						new SqlParameter("@Month", dto.Month),
						new SqlParameter("@Comments", dto.Comments),
						new SqlParameter("@UserID", Environment.UserName),
						new SqlParameter("@Reviewed", dto.Reviewed)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000179 RID: 377 RVA: 0x00014808 File Offset: 0x00012A08
		public static void SaveArchiveComments(CommentsDTO dto)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_save_archive_comments";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@C_ID", dto.cID),
						new SqlParameter("@ReportingYear", dto.ReportingYear),
						new SqlParameter("@Month", dto.Month),
						new SqlParameter("@Comments", dto.Comments),
						new SqlParameter("@UserID", Environment.UserName),
						new SqlParameter("@Reviewed", dto.Reviewed)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600017A RID: 378 RVA: 0x00014958 File Offset: 0x00012B58
		public static List<CommentsDTO> GetComments(int year, int month, string pmContactID)
		{
			List<CommentsDTO> list = new List<CommentsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<CommentsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "select a.chart_ID, b.Chart_Name, a.ReportingYear, a.Month, a.Comments, a.ChangedBy from dbo.T_UPM_COMMENTS as a Join dbo.T_UPM_Charts as b On a.Chart_id = b.Chart_ID where a.reportingyear = @year and a.Month in (@month) and b.PM_Contact_ID = @PMContactID ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@year", year),
						new SqlParameter("@month", month),
						new SqlParameter("@PMContactID", pmContactID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new CommentsDTO
					{
						MetricID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ReportingYear = Conversions.ToString(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						Comments = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						UserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600017B RID: 379 RVA: 0x00014B10 File Offset: 0x00012D10
		public static List<CommentsDTO> GetCommentsByCID(int year, int month, int cID)
		{
			List<CommentsDTO> list = new List<CommentsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<CommentsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "select a.C_ID, b.Chart_Name, a.ReportingYear, a.Month, a.Comments, a.ChangedBy from dbo.T_UPM_Comments as a Join dbo.T_UPM_Charts as b On a.c_id = b.C_ID where a.reportingyear = @year and a.Month in (@month) and a.C_ID = @CID ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@year", year),
						new SqlParameter("@month", month),
						new SqlParameter("@CID", cID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					CommentsDTO commentsDTO = new CommentsDTO();
					commentsDTO.cID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))));
					commentsDTO.MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1)));
					commentsDTO.ReportingYear = Conversions.ToString(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2))));
					commentsDTO.Month = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))));
					commentsDTO.Comments = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)));
					commentsDTO.UserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)));
					commentsDTO.ClearBuffer();
					list.Add(commentsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600017C RID: 380 RVA: 0x00014CF4 File Offset: 0x00012EF4
		public static List<CommentsDTO> GetCommentsByMetricID(int year, int month, string chartID)
		{
			List<CommentsDTO> list = new List<CommentsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<CommentsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "select a.chart_ID, b.Chart_Name, a.ReportingYear, a.Month, a.Comments, a.ChangedBy from dbo.T_UPM_Comments as a Join dbo.T_UPM_Charts as b On a.Chart_id = b.Chart_ID where a.reportingyear = @year and a.Month in (@month) and a.Chart_ID = @MetricID ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@year", year),
						new SqlParameter("@month", month),
						new SqlParameter("@MetricID", chartID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new CommentsDTO
					{
						MetricID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(0))),
						MetricName = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(1))),
						ReportingYear = Conversions.ToString(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						Month = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))),
						Comments = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						UserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600017D RID: 381 RVA: 0x00014EC8 File Offset: 0x000130C8
		public static void SaveDataEntryTAB1(MetricDSPointsDTO dto)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_save_summary_comments";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Chart_ID", dto.MetricID),
						new SqlParameter("@ReportingYear", dto.ReportingYear),
						new SqlParameter("@Month", dto.month)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600017E RID: 382 RVA: 0x00014FC0 File Offset: 0x000131C0
		public static List<SecurityUsersGroupsDTO> GetSecurityUserGroups(string groupID, string userID)
		{
			List<SecurityUsersGroupsDTO> list = new List<SecurityUsersGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityUsersGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_UserGroups_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(groupID, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@GroupID", groupID));
				}
				flag = Operators.CompareString(userID, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", userID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityUsersGroupsDTO
					{
						UserID = Conversions.ToString(sqlDataReader.GetValue(0)),
						GroupID = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600017F RID: 383 RVA: 0x0001510C File Offset: 0x0001330C
		public static List<SecurityUsersGroupsDTO> GetSecurityUserGroups(string userID)
		{
			List<SecurityUsersGroupsDTO> list = new List<SecurityUsersGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityUsersGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_UserGroups_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(userID, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", userID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityUsersGroupsDTO
					{
						UserID = Conversions.ToString(sqlDataReader.GetValue(0)),
						GroupID = Conversions.ToString(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000180 RID: 384 RVA: 0x0000241E File Offset: 0x0000061E
		public static void SaveSecurityUserGroups(SecurityUsersGroupsDTO data)
		{
			PerfMgDB.SetSecurityUserGroups("S", data);
		}

		// Token: 0x06000181 RID: 385 RVA: 0x0000242E File Offset: 0x0000062E
		public static void DeleteSecurityUserGroups(SecurityUsersGroupsDTO data)
		{
			PerfMgDB.SetSecurityUserGroups("D", data);
		}

		// Token: 0x06000182 RID: 386 RVA: 0x0001522C File Offset: 0x0001342C
		private static void SetSecurityUserGroups(string operation, SecurityUsersGroupsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_UserGroups_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@GroupID", data.GroupID),
						new SqlParameter("@UserID", data.UserID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000183 RID: 387 RVA: 0x00015314 File Offset: 0x00013514
		public static List<SecurityMetricUsersDTO> GetSecurityMetricNotInUser(string userID)
		{
			List<SecurityMetricUsersDTO> list = new List<SecurityMetricUsersDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityMetricUsersDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select \ta.Chart_ID, a.Chart_Name, @UserID From \tdbo.t_upm_Charts as a Left Join dbo.t_security_ChartUsers as b On a.Chart_ID = b.ChartID and b.UserID = @UserID        Left Join dbo.t_security_ChartGroups as c On a.Chart_ID = c.ChartID        Left Join dbo.t_security_UserGroups as d On c.GroupID = d.GroupID and d.UserID = @UserID Where b.ChartID Is null And d.UserID Is Null And a.Active = 1 Order by a.Chart_Name";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@UserID", userID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityMetricUsersDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = Conversions.ToString(sqlDataReader.GetValue(1)),
						UserID = Conversions.ToString(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000184 RID: 388 RVA: 0x00015430 File Offset: 0x00013630
		public static List<SecurityMetricUsersDTO> GetSecurityMetricUsers(string userID)
		{
			List<SecurityMetricUsersDTO> list = new List<SecurityMetricUsersDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityMetricUsersDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_ChartUsers_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@UserID", userID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityMetricUsersDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = Conversions.ToString(sqlDataReader.GetValue(1)),
						UserID = Conversions.ToString(sqlDataReader.GetValue(2)),
						GroupName = Conversions.ToString(sqlDataReader.GetValue(3)),
						Editable = Conversions.ToBoolean(sqlDataReader.GetValue(4))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000185 RID: 389 RVA: 0x00015578 File Offset: 0x00013778
		public static List<SecurityMetricGroupsDTO> GetSecurityMetricsInGroup(string groupID)
		{
			List<SecurityMetricGroupsDTO> list = new List<SecurityMetricGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityMetricGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_ChartGroups_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@GroupID", groupID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityMetricGroupsDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = Conversions.ToString(sqlDataReader.GetValue(1)),
						GroupID = Conversions.ToString(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000186 RID: 390 RVA: 0x00015694 File Offset: 0x00013894
		public static List<SecurityMetricGroupsDTO> GetSecurityMetricsNotInGroup(string groupID)
		{
			List<SecurityMetricGroupsDTO> list = new List<SecurityMetricGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityMetricGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "usp_Security_ChartNotInGroup_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@GroupID", groupID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityMetricGroupsDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = Conversions.ToString(sqlDataReader.GetValue(1)),
						GroupID = Conversions.ToString(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000187 RID: 391 RVA: 0x0000243E File Offset: 0x0000063E
		public static void SaveSecurityMetricUsers(SecurityMetricUsersDTO data)
		{
			PerfMgDB.SetSecurityMetricUsers("S", data);
		}

		// Token: 0x06000188 RID: 392 RVA: 0x0000244E File Offset: 0x0000064E
		public static void DeleteSecurityMetricUsers(SecurityMetricUsersDTO data)
		{
			PerfMgDB.SetSecurityMetricUsers("D", data);
		}

		// Token: 0x06000189 RID: 393 RVA: 0x000157B0 File Offset: 0x000139B0
		private static void SetSecurityMetricUsers(string operation, SecurityMetricUsersDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_ChartUsers_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@UserID", data.UserID),
						new SqlParameter("@ChartID", data.MetricID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600018A RID: 394 RVA: 0x00015898 File Offset: 0x00013A98
		public static List<SecurityMetricGroupsDTO> GetSecurityMetricGroups(string groupID)
		{
			List<SecurityMetricGroupsDTO> list = new List<SecurityMetricGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityMetricGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_ChartGroups_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(groupID, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@GroupID", groupID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityMetricGroupsDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = Conversions.ToString(sqlDataReader.GetValue(1)),
						GroupID = Conversions.ToString(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600018B RID: 395 RVA: 0x0000245E File Offset: 0x0000065E
		public static void SaveSecurityMetricGroups(SecurityMetricGroupsDTO data)
		{
			PerfMgDB.SetSecurityMetricGroups("S", data);
		}

		// Token: 0x0600018C RID: 396 RVA: 0x0000246E File Offset: 0x0000066E
		public static void DeleteSecurityMetricGroups(SecurityMetricGroupsDTO data)
		{
			PerfMgDB.SetSecurityMetricGroups("D", data);
		}

		// Token: 0x0600018D RID: 397 RVA: 0x000159CC File Offset: 0x00013BCC
		private static void SetSecurityMetricGroups(string operation, SecurityMetricGroupsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_ChartGroups_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@GroupID", data.GroupID),
						new SqlParameter("@ChartID", data.MetricID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600018E RID: 398 RVA: 0x00015AB4 File Offset: 0x00013CB4
		public static List<SecurityMetricGroupsDTO> GetSecurityMetricsAvailable(string groupID)
		{
			List<SecurityMetricGroupsDTO> list = new List<SecurityMetricGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityMetricGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_ChartNotInGroup_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@GroupID", groupID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityMetricGroupsDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = Conversions.ToString(sqlDataReader.GetValue(1)),
						GroupID = Conversions.ToString(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600018F RID: 399 RVA: 0x00015BD0 File Offset: 0x00013DD0
		public static List<SecurityGroupFunctionsDTO> GetSecurityGroupFunctions()
		{
			List<SecurityGroupFunctionsDTO> list = new List<SecurityGroupFunctionsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityGroupFunctionsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_GroupFunctions_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityGroupFunctionsDTO
					{
						GroupFunction = Conversions.ToString(sqlDataReader.GetValue(0)),
						FunctionDescription = Conversions.ToString(sqlDataReader.GetValue(1)),
						HierarchyTypeID = Conversions.ToInteger(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000190 RID: 400 RVA: 0x00015CD4 File Offset: 0x00013ED4
		public static List<SecurityGroupsDTO> GetSecurityGroups()
		{
			return PerfMgDB.GetSecurityGroups(Conversions.ToString(0), string.Empty);
		}

		// Token: 0x06000191 RID: 401 RVA: 0x00015CF8 File Offset: 0x00013EF8
		public static List<SecurityGroupsDTO> GetSecurityGroups(int groupID)
		{
			return PerfMgDB.GetSecurityGroups(Conversions.ToString(groupID), string.Empty);
		}

		// Token: 0x06000192 RID: 402 RVA: 0x00015D1C File Offset: 0x00013F1C
		public static List<SecurityGroupsDTO> GetSecurityGroups(string groupFunction)
		{
			return PerfMgDB.GetSecurityGroups(Conversions.ToString(0), groupFunction);
		}

		// Token: 0x06000193 RID: 403 RVA: 0x00015D3C File Offset: 0x00013F3C
		public static List<SecurityGroupsDTO> GetSecurityGroups(string groupID, string groupFunction)
		{
			List<SecurityGroupsDTO> list = new List<SecurityGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_Groups_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Conversions.ToDouble(groupID) > 0.0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@GroupID", groupID));
				}
				flag = Operators.CompareString(groupFunction, string.Empty, false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@GroupFunction", groupFunction));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityGroupsDTO
					{
						GroupID = Conversions.ToString(sqlDataReader.GetValue(0)),
						GroupDescription = Conversions.ToString(sqlDataReader.GetValue(1)),
						GroupFunction = Conversions.ToString(sqlDataReader.GetValue(2)),
						FunctionDescription = Conversions.ToString(sqlDataReader.GetValue(3))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000194 RID: 404 RVA: 0x0000247E File Offset: 0x0000067E
		public static void SaveSecurityGroups(SecurityGroupsDTO data)
		{
			PerfMgDB.SetSecurityGroups("S", data);
		}

		// Token: 0x06000195 RID: 405 RVA: 0x0000248E File Offset: 0x0000068E
		public static void DeleteSecurityGroups(SecurityGroupsDTO data)
		{
			PerfMgDB.SetSecurityGroups("D", data);
		}

		// Token: 0x06000196 RID: 406 RVA: 0x00015EC8 File Offset: 0x000140C8
		private static void SetSecurityGroups(string operation, SecurityGroupsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_Groups_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@GroupID", data.GroupID),
						new SqlParameter("@GroupDescription", data.GroupDescription),
						new SqlParameter("@GroupFunction", data.GroupFunction)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x06000197 RID: 407 RVA: 0x00015FCC File Offset: 0x000141CC
		public static List<SecurityUsersDTO> GetSecurityUsers()
		{
			return PerfMgDB.GetSecurityUsers("");
		}

		// Token: 0x06000198 RID: 408 RVA: 0x00015FE8 File Offset: 0x000141E8
		public static List<SecurityUsersDTO> GetSecurityUsers(string userID)
		{
			List<SecurityUsersDTO> list = new List<SecurityUsersDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityUsersDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_Users_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(userID, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@UserID", userID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityUsersDTO
					{
						UserID = Conversions.ToString(sqlDataReader.GetValue(0)),
						FirstName = Conversions.ToString(sqlDataReader.GetValue(1)),
						LastName = Conversions.ToString(sqlDataReader.GetValue(2)),
						Phone = Conversions.ToString(sqlDataReader.GetValue(3)),
						Department = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						SupportPersonnel = Conversions.ToBoolean(sqlDataReader.GetValue(5))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x06000199 RID: 409 RVA: 0x00016178 File Offset: 0x00014378
		public static List<SecurityUsersDTO> GetSecurityUsersNotInGroup(string groupID)
		{
			List<SecurityUsersDTO> list = new List<SecurityUsersDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityUsersDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "usp_Security_UserNotInGroup_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				bool flag = Operators.CompareString(groupID, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@GroupID", groupID));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityUsersDTO
					{
						UserID = Conversions.ToString(sqlDataReader.GetValue(0)),
						FirstName = Conversions.ToString(sqlDataReader.GetValue(1)),
						LastName = Conversions.ToString(sqlDataReader.GetValue(2)),
						Phone = Conversions.ToString(sqlDataReader.GetValue(3)),
						Department = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x0600019A RID: 410 RVA: 0x0000249E File Offset: 0x0000069E
		public static void SaveSecurityUsers(SecurityUsersDTO data)
		{
			PerfMgDB.SetSecurityUsers("S", data);
		}

		// Token: 0x0600019B RID: 411 RVA: 0x000024AE File Offset: 0x000006AE
		public static void DeleteSecurityUsers(SecurityUsersDTO data)
		{
			PerfMgDB.SetSecurityUsers("D", data);
		}

		// Token: 0x0600019C RID: 412 RVA: 0x000162F4 File Offset: 0x000144F4
		private static void SetSecurityUsers(string operation, SecurityUsersDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_Users_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@UserID", data.UserID),
						new SqlParameter("@FirstName", data.FirstName),
						new SqlParameter("@LastName", data.LastName),
						new SqlParameter("@Phone", data.Phone),
						new SqlParameter("@Department", data.Department),
						new SqlParameter("@SupportPersonnel", data.SupportPersonnel)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600019D RID: 413 RVA: 0x00016468 File Offset: 0x00014668
		public static bool IsUserInMasterGroup(string userID)
		{
			string text = "Select Count(*) From t_pm_contacts where PM_Contact_ID = @UserID and Active = 'Y'";
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			bool flag2;
			try
			{
				sqlConnection.Open();
				int num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@UserID", userID)
					}
				}.ExecuteScalar());
				bool flag = num == 0;
				if (flag)
				{
					flag2 = false;
				}
				else
				{
					flag2 = true;
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return flag2;
		}

		// Token: 0x0600019E RID: 414 RVA: 0x00016538 File Offset: 0x00014738
		public static void SaveSecurityLockMonth(SecurityLockMonthDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_LockMonth_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ReportingPeriod", data.ReportingPeriod),
						new SqlParameter("@ReportingYear", data.ReportingYear),
						new SqlParameter("@Locked", data.Locked)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x0600019F RID: 415 RVA: 0x00016630 File Offset: 0x00014830
		public static void SaveSecurityLockSeries(SecurityLockSeriesDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_LockSeries_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@DataSeriesDesc", data.DataSeriesDescription),
						new SqlParameter("@Locked", data.Locked)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060001A0 RID: 416 RVA: 0x00016708 File Offset: 0x00014908
		public static void SaveSecurityPublishMonth(SecurityPublishMonthDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_PublishMonth_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ReportingPeriod", data.ReportingPeriod),
						new SqlParameter("@ReportingYear", data.ReportingYear),
						new SqlParameter("@Published", data.Published)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060001A1 RID: 417 RVA: 0x00016800 File Offset: 0x00014A00
		public static List<SecurityLockMonthDTO> GetSecurityLockMonth()
		{
			List<SecurityLockMonthDTO> list = new List<SecurityLockMonthDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityLockMonthDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select * From T_Security_LockMonth";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityLockMonthDTO
					{
						ReportingPeriod = Conversions.ToString(sqlDataReader.GetValue(0)),
						ReportingYear = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						Locked = Conversions.ToBoolean(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001A2 RID: 418 RVA: 0x00016904 File Offset: 0x00014B04
		public static SecurityLockMonthDTO GetSecurityLockMonth(string reportingPeriod, int reportingYear)
		{
			SecurityLockMonthDTO securityLockMonthDTO = new SecurityLockMonthDTO();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			SecurityLockMonthDTO securityLockMonthDTO2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_LockMonth_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ReportingPeriod", reportingPeriod),
						new SqlParameter("@ReportingYear", reportingYear)
					}
				}.ExecuteReader();
				bool flag = sqlDataReader.Read();
				if (flag)
				{
					securityLockMonthDTO.Locked = Conversions.ToBoolean(sqlDataReader.GetValue(0));
					securityLockMonthDTO.ReportingPeriod = Conversions.ToString(sqlDataReader.GetValue(1));
					securityLockMonthDTO.ReportingYear = Conversions.ToInteger(sqlDataReader.GetValue(2));
				}
				else
				{
					securityLockMonthDTO.Locked = false;
					securityLockMonthDTO.ReportingPeriod = reportingPeriod;
					securityLockMonthDTO.ReportingYear = reportingYear;
				}
				securityLockMonthDTO2 = securityLockMonthDTO;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return securityLockMonthDTO2;
		}

		// Token: 0x060001A3 RID: 419 RVA: 0x00016A44 File Offset: 0x00014C44
		public static SecurityLockSeriesDTO GetSecurityLockSeries(string seriesDesc)
		{
			SecurityLockSeriesDTO securityLockSeriesDTO = new SecurityLockSeriesDTO();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			SecurityLockSeriesDTO securityLockSeriesDTO2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_LockSeries_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@DataSeriesDesc", seriesDesc)
					}
				}.ExecuteReader();
				bool flag = sqlDataReader.Read();
				if (flag)
				{
					securityLockSeriesDTO.Locked = Conversions.ToBoolean(sqlDataReader.GetValue(0));
					securityLockSeriesDTO.DataSeriesDescription = Conversions.ToString(sqlDataReader.GetValue(1));
				}
				else
				{
					securityLockSeriesDTO.Locked = false;
					securityLockSeriesDTO.DataSeriesDescription = seriesDesc;
				}
				securityLockSeriesDTO2 = securityLockSeriesDTO;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return securityLockSeriesDTO2;
		}

		// Token: 0x060001A4 RID: 420 RVA: 0x00016B4C File Offset: 0x00014D4C
		public static List<string> GetSecurityLockSeries()
		{
			List<string> list = new List<string>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<string> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select DataSeriesDesc From dbo.T_Security_LockSeries";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(Conversions.ToString(sqlDataReader.GetValue(0)));
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001A5 RID: 421 RVA: 0x00016C18 File Offset: 0x00014E18
		public static SecurityPublishMonthDTO GetSecurityPublishMonth(string reportingPeriod, int reportingYear)
		{
			SecurityPublishMonthDTO securityPublishMonthDTO = new SecurityPublishMonthDTO();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			SecurityPublishMonthDTO securityPublishMonthDTO2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_PublishMonth_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ReportingPeriod", reportingPeriod),
						new SqlParameter("@ReportingYear", reportingYear)
					}
				}.ExecuteReader();
				bool flag = sqlDataReader.Read();
				if (flag)
				{
					securityPublishMonthDTO.Published = Conversions.ToBoolean(sqlDataReader.GetValue(0));
					securityPublishMonthDTO.ReportingPeriod = Conversions.ToString(sqlDataReader.GetValue(1));
					securityPublishMonthDTO.ReportingYear = Conversions.ToInteger(sqlDataReader.GetValue(2));
				}
				else
				{
					securityPublishMonthDTO.Published = false;
					securityPublishMonthDTO.ReportingPeriod = reportingPeriod;
					securityPublishMonthDTO.ReportingYear = reportingYear;
				}
				securityPublishMonthDTO2 = securityPublishMonthDTO;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return securityPublishMonthDTO2;
		}

		// Token: 0x060001A6 RID: 422 RVA: 0x00016D58 File Offset: 0x00014F58
		public static List<SecurityVerificationDTO> GetSecurityVerification(int hID)
		{
			List<SecurityVerificationDTO> list = new List<SecurityVerificationDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityVerificationDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_Verification_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@H_ID", hID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityVerificationDTO
					{
						OperatingCompany = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = Conversions.ToString(sqlDataReader.GetValue(1)),
						GroupName = Conversions.ToString(sqlDataReader.GetValue(2)),
						UserID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3)))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001A7 RID: 423 RVA: 0x00016E90 File Offset: 0x00015090
		public static List<SecurityExcelPermissionsDTO> GetSecurityExcel(string userID)
		{
			List<SecurityExcelPermissionsDTO> list = new List<SecurityExcelPermissionsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityExcelPermissionsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_ExcelAvailable_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@UserID", userID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityExcelPermissionsDTO
					{
						MetricID = Conversions.ToString(sqlDataReader.GetValue(0))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001A8 RID: 424 RVA: 0x00016F84 File Offset: 0x00015184
		public static List<WebUserDashboardDataEntryDTO> GetMyMetricDashboards(string userID)
		{
			List<WebUserDashboardDataEntryDTO> list = new List<WebUserDashboardDataEntryDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<WebUserDashboardDataEntryDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "Select\tc.DashboardName,          a.Chart_Name,          a.C_ID,          a.Chart_ID,          b.description,          b.DS_ID,          b.Data_Series,         Max(Case When a.PrimaryDataProvider = @UserID or a.BackupDataProvider = @UserID Then 1 Else 0 End) as DP,         Max(Case When e.UserID = @UserID Then 1 Else 0 End) as CP  From\tt_UPM_Charts as a Join t_UPM_Data_Series as b On a.C_ID = b.C_ID and b.Description in ('YTD','Monthly','PE')         Join dbo.t_web_UserDashboardCharts as c On a.C_ID = c.C_ID and c.DashboardName is Not Null         Left Join dbo.t_web_UserDashboardSharing as d On c.DashboardName = d.DashboardName and c.UserID = d.UserID        Left Join t_UPM_ChartCommentProviders as e On a.C_ID = e.C_ID         Where\t(a.PrimaryDataProvider = @UserID or a.BackupDataProvider = @UserID or (e.UserID = @UserID and e.UserID is not null))  Group By c.DashboardName,          a.Chart_Name,          a.C_ID,          a.Chart_ID,          b.description,          b.DS_ID,          b.Data_Series  Order By c.DashboardName, a.Chart_Name, b.Data_Series ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@UserID", userID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new WebUserDashboardDataEntryDTO
					{
						DashboardName = Conversions.ToString(sqlDataReader.GetValue(0)),
						MetricName = Conversions.ToString(sqlDataReader.GetValue(1)),
						CID = Conversions.ToInteger(DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(2)))),
						MetricID = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(3))),
						DataSeries = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(4))),
						DSID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(5))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001A9 RID: 425 RVA: 0x00017114 File Offset: 0x00015314
		public static List<SecurityUserPermissionsDTO> GetWebDashboardGroupsAvailable(string userID)
		{
			List<SecurityUserPermissionsDTO> list = new List<SecurityUserPermissionsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<SecurityUserPermissionsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_Security_UserDashboardGroupsAvail_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@UserID", userID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new SecurityUserPermissionsDTO
					{
						HierarchyID = Conversions.ToString(sqlDataReader.GetValue(0)),
						HierarchyName = Conversions.ToString(sqlDataReader.GetValue(1)),
						OperatingCompany = Conversions.ToString(sqlDataReader.GetValue(2)),
						UpdateComments = Conversions.ToBoolean(sqlDataReader.GetValue(3)),
						UpdateData = Conversions.ToBoolean(sqlDataReader.GetValue(4)),
						CID = Conversions.ToInteger(sqlDataReader.GetValue(5)),
						MetricID = Conversions.ToString(sqlDataReader.GetValue(6))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001AA RID: 426 RVA: 0x00017298 File Offset: 0x00015498
		public static List<ScorecardGenericNameDTO> GetSCGenericName()
		{
			return PerfMgDB.GetScorecardGenericName();
		}

		// Token: 0x060001AB RID: 427 RVA: 0x000172B0 File Offset: 0x000154B0
		public static List<ScorecardGenericNameDTO> GetScorecardGenericName()
		{
			List<ScorecardGenericNameDTO> list = new List<ScorecardGenericNameDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardGenericNameDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_GenericSCName_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardGenericNameDTO
					{
						scGenID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						scGenDesc = Conversions.ToString(sqlDataReader.GetValue(1)),
						scGenNameConcat = Conversions.ToString(sqlDataReader.GetValue(2))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001AC RID: 428 RVA: 0x000173B4 File Offset: 0x000155B4
		public static int GetSCGroupMAXSortOrder(int scID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				string text = "Select dbo.udf_GetMaxSortOrderSCGroups(@scID)";
				num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@ScID", scID)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060001AD RID: 429 RVA: 0x00017474 File Offset: 0x00015674
		public static int GetSCMeasureMAXSortOrder(int scMID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				string text = "Select dbo.udf_GetMaxSortOrderSCMeasure(@scgroupMID)";
				num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text,
					Parameters = 
					{
						new SqlParameter("@ScgroupMID", scMID)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060001AE RID: 430 RVA: 0x000024BE File Offset: 0x000006BE
		public static void SaveScorecards(ScorecardsDTO data)
		{
			PerfMgDB.SetScorecards("S", data);
		}

		// Token: 0x060001AF RID: 431 RVA: 0x000024CE File Offset: 0x000006CE
		public static void DeleteScorecards(ScorecardsDTO data)
		{
			PerfMgDB.SetScorecards("D", data);
		}

		// Token: 0x060001B0 RID: 432 RVA: 0x00017534 File Offset: 0x00015734
		private static void SetScorecards(string operation, ScorecardsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_Scorecards_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@scorecardID", data.scorecardID),
						new SqlParameter("@scorecardFormatID", data.scorecardFormatID),
						new SqlParameter("@ManagedByID", data.ManagedByID),
						new SqlParameter("@associationID", data.AssociationID),
						new SqlParameter("@scorecardName", data.scorecardName),
						new SqlParameter("@LevelID", data.levelID),
						new SqlParameter("@scGenID", data.scGenID),
						new SqlParameter("@scOwner", data.scOwner),
						new SqlParameter("@sharepointID", data.sharepointID),
						new SqlParameter("@Active", data.Active)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060001B1 RID: 433 RVA: 0x000024DE File Offset: 0x000006DE
		public static void UpdateSCGroupMeasures(ScorecardMeasuresDTO data)
		{
			PerfMgDB.UpdateScorecardGroupMeasures("U", data);
		}

		// Token: 0x060001B2 RID: 434 RVA: 0x0001773C File Offset: 0x0001593C
		private static void UpdateScorecardGroupMeasures(string operation, ScorecardMeasuresDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_UpdateSCGroupMeasures_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@groupID", data.groupID),
						new SqlParameter("@c_ID", data.C_ID),
						new SqlParameter("@SortOrder", data.SortOrder)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060001B3 RID: 435 RVA: 0x000024EE File Offset: 0x000006EE
		public static void SaveSCGroupMeasures(ScorecardMeasuresDTO data)
		{
			PerfMgDB.SetScorecardGroupMeasures("S", data);
		}

		// Token: 0x060001B4 RID: 436 RVA: 0x000024FE File Offset: 0x000006FE
		public static void DeleteSCGroupMeasures(ScorecardMeasuresDTO data)
		{
			PerfMgDB.SetScorecardGroupMeasures("D", data);
		}

		// Token: 0x060001B5 RID: 437 RVA: 0x00017850 File Offset: 0x00015A50
		private static void SetScorecardGroupMeasures(string operation, ScorecardMeasuresDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_UPM_SCGroupMeasures_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@groupID", data.groupID),
						new SqlParameter("@c_ID", data.C_ID),
						new SqlParameter("@SortOrder", data.SortOrder)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060001B6 RID: 438 RVA: 0x0000250E File Offset: 0x0000070E
		public static void SaveSCGroups(ScorecardGroupsDTO data)
		{
			PerfMgDB.SetScorecardGroup("S", data);
		}

		// Token: 0x060001B7 RID: 439 RVA: 0x0000251E File Offset: 0x0000071E
		public static void DeleteSCGroups(ScorecardGroupsDTO data)
		{
			PerfMgDB.SetScorecardGroup("D", data);
		}

		// Token: 0x060001B8 RID: 440 RVA: 0x00017964 File Offset: 0x00015B64
		private static void SetScorecardGroup(string operation, ScorecardGroupsDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ScorecardGroups_set";
				new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@Operation", operation),
						new SqlParameter("@groupID", data.groupID),
						new SqlParameter("@GroupName", data.GroupName),
						new SqlParameter("@SortOrder", data.SortOrder),
						new SqlParameter("@scorecardID", data.scorecardID),
						new SqlParameter("@associationID", data.associationID)
					}
				}.ExecuteNonQuery();
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
		}

		// Token: 0x060001B9 RID: 441 RVA: 0x00017AB4 File Offset: 0x00015CB4
		public static List<ScorecardGroupsDTO> SetSCGroups(int scID)
		{
			return PerfMgDB.SetScorecardGroups(scID);
		}

		// Token: 0x060001BA RID: 442 RVA: 0x00017ACC File Offset: 0x00015CCC
		public static List<ScorecardGroupsDTO> SetScorecardGroups(int scID)
		{
			List<ScorecardGroupsDTO> list = new List<ScorecardGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_SCGroupsBySCID_set";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ScID", scID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardGroupsDTO
					{
						groupID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						GroupName = Conversions.ToString(sqlDataReader.GetValue(1)),
						SortOrder = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						associationID = Conversions.ToInteger(sqlDataReader.GetValue(4))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001BB RID: 443 RVA: 0x00017C00 File Offset: 0x00015E00
		public static List<ScorecardMeasuresDTO> GetSCGroupMeasures(int groupID)
		{
			return PerfMgDB.GetSCGroupMetrics(groupID);
		}

		// Token: 0x060001BC RID: 444 RVA: 0x00017C18 File Offset: 0x00015E18
		public static List<ScorecardGroupsDTO> GetSCGroups(int scID)
		{
			return PerfMgDB.GetScorecardGroups(scID);
		}

		// Token: 0x060001BD RID: 445 RVA: 0x00017C30 File Offset: 0x00015E30
		public static List<ScorecardMeasuresDTO> GetSCGroupMetrics(int groupID)
		{
			List<ScorecardMeasuresDTO> list = new List<ScorecardMeasuresDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardMeasuresDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_SCMetricsBySCGroupID_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@groupID", groupID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardMeasuresDTO
					{
						groupID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						C_ID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						SortOrder = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						Chart_ID = Conversions.ToString(sqlDataReader.GetValue(3)),
						Chart_Name = Conversions.ToString(sqlDataReader.GetValue(4)),
						SCmeasureConcat = Conversions.ToString(sqlDataReader.GetValue(5))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001BE RID: 446 RVA: 0x00017DA8 File Offset: 0x00015FA8
		public static List<ScorecardGroupsDTO> GetScorecardGroups(int scID)
		{
			List<ScorecardGroupsDTO> list = new List<ScorecardGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_SCGroupsBySCID_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@ScID", scID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardGroupsDTO
					{
						groupID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						GroupName = Conversions.ToString(sqlDataReader.GetValue(1)),
						SortOrder = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						associationID = Conversions.ToInteger(sqlDataReader.GetValue(4))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001BF RID: 447 RVA: 0x00017EDC File Offset: 0x000160DC
		public static List<ScorecardFormatsDTO> GetScorecardFormat()
		{
			return PerfMgDB.GetScorecardFormats();
		}

		// Token: 0x060001C0 RID: 448 RVA: 0x00017EF4 File Offset: 0x000160F4
		public static List<ScorecardFormatsDTO> GetScorecardFormats()
		{
			List<ScorecardFormatsDTO> list = new List<ScorecardFormatsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardFormatsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ScorecardFormats_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardFormatsDTO
					{
						ScorecardFormatID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ScorecardFormat = Conversions.ToString(sqlDataReader.GetValue(1)),
						ReportURL = Conversions.ToString(sqlDataReader.GetValue(2)),
						ScorecardFormatConcat = Conversions.ToString(sqlDataReader.GetValue(3))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001C1 RID: 449 RVA: 0x0001800C File Offset: 0x0001620C
		public static int GetSCGroupSortOrderByGID(int groupID)
		{
			return PerfMgDB.GetSCGroupSortOrderByGroupID(groupID);
		}

		// Token: 0x060001C2 RID: 450 RVA: 0x00018024 File Offset: 0x00016224
		public static int GetSCGroupSortOrderByGroupID(int groupID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_SCGroupSortOrderByGID_get";
				num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@gID", groupID)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060001C3 RID: 451 RVA: 0x000180E4 File Offset: 0x000162E4
		public static int GetScorecardIDBySCName(string SCName)
		{
			return PerfMgDB.GetSCIDBySCName(SCName);
		}

		// Token: 0x060001C4 RID: 452 RVA: 0x000180FC File Offset: 0x000162FC
		public static int GetSCIDBySCName(string SCname)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_SCIDBySCName_get";
				num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@SCName", SCname)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060001C5 RID: 453 RVA: 0x000181B4 File Offset: 0x000163B4
		public static int GetChildAssociationByGroupID(int groupID)
		{
			return PerfMgDB.GetChildAssocIDByGroupID(groupID);
		}

		// Token: 0x060001C6 RID: 454 RVA: 0x000181CC File Offset: 0x000163CC
		public static int GetChildAssocIDByGroupID(int groupID)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ChildAssociationIDByGrpID_get";
				num = Conversions.ToInteger(new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@gID", groupID)
					}
				}.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060001C7 RID: 455 RVA: 0x0001828C File Offset: 0x0001648C
		public static List<ScorecardsDTO> GetAssociationsByParent(int parentID)
		{
			return PerfMgDB.GetAssociationsByParentID(parentID);
		}

		// Token: 0x060001C8 RID: 456 RVA: 0x000182A4 File Offset: 0x000164A4
		public static List<ScorecardsDTO> GetAssociationsByParentID(int parentID)
		{
			List<ScorecardsDTO> list = new List<ScorecardsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_AssociationPairsByPID_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@parentID", parentID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardsDTO
					{
						AssocParentID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						ParentType = Conversions.ToString(sqlDataReader.GetValue(1)),
						ParentDesc = Conversions.ToString(sqlDataReader.GetValue(2)),
						AssocChildID = Conversions.ToInteger(sqlDataReader.GetValue(3)),
						ChildType = Conversions.ToString(sqlDataReader.GetValue(4)),
						ChildDesc = Conversions.ToString(sqlDataReader.GetValue(5)),
						ChildConcat = Conversions.ToString(sqlDataReader.GetValue(6))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001C9 RID: 457 RVA: 0x00018430 File Offset: 0x00016630
		public static List<ScorecardGroupsDTO> GetAssociationsByGroup(int groupID)
		{
			return PerfMgDB.GetAssociationsByGID(groupID);
		}

		// Token: 0x060001CA RID: 458 RVA: 0x00018448 File Offset: 0x00016648
		public static List<ScorecardGroupsDTO> GetAssociationsByGID(int groupID)
		{
			List<ScorecardGroupsDTO> list = new List<ScorecardGroupsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardGroupsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_SCGroupsByGID_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@gID", groupID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardGroupsDTO
					{
						associationID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						groupID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						GroupName = Conversions.ToString(sqlDataReader.GetValue(2)),
						scorecardID = Conversions.ToInteger(sqlDataReader.GetValue(3))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001CB RID: 459 RVA: 0x0001857C File Offset: 0x0001677C
		public static List<ScorecardsDTO> GetAssociations()
		{
			return PerfMgDB.GetAssociationsList();
		}

		// Token: 0x060001CC RID: 460 RVA: 0x00018594 File Offset: 0x00016794
		public static List<ScorecardsDTO> GetAssociationsList()
		{
			List<ScorecardsDTO> list = new List<ScorecardsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_Associations_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardsDTO
					{
						AssociationID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						AssociationDesc = Conversions.ToString(sqlDataReader.GetValue(1)),
						associationType = Conversions.ToString(sqlDataReader.GetValue(2)),
						AssociationConcat = Conversions.ToString(sqlDataReader.GetValue(3))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001CD RID: 461 RVA: 0x000186AC File Offset: 0x000168AC
		public static List<ScorecardsDTO> GetScorecards()
		{
			return PerfMgDB.GetScorecards("", "");
		}

		// Token: 0x060001CE RID: 462 RVA: 0x000186D0 File Offset: 0x000168D0
		public static List<ScorecardsDTO> GetScorecards(string SCOwner, string SCName)
		{
			List<ScorecardsDTO> list = new List<ScorecardsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_Scorecards_get";
				SqlCommand sqlCommand = new SqlCommand(text, sqlConnection);
				sqlCommand.CommandType = CommandType.StoredProcedure;
				sqlCommand.Parameters.Add(new SqlParameter("@SCOwner", SCOwner));
				bool flag = Operators.CompareString(SCName, "", false) > 0;
				if (flag)
				{
					sqlCommand.Parameters.Add(new SqlParameter("@SCName", SCName));
				}
				SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardsDTO
					{
						scorecardID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						scorecardFormatID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						ManagedByID = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						AssociationID = Conversions.ToInteger(sqlDataReader.GetValue(3)),
						scorecardName = Conversions.ToString(sqlDataReader.GetValue(4)),
						levelID = Conversions.ToInteger(sqlDataReader.GetValue(5)),
						scGenID = Conversions.ToInteger(sqlDataReader.GetValue(6)),
						scOwner = Conversions.ToString(sqlDataReader.GetValue(7)),
						ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9))),
						sharepointID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10))))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001CF RID: 463 RVA: 0x000188E8 File Offset: 0x00016AE8
		public static List<ScorecardsDTO> GetAllScorecards()
		{
			List<ScorecardsDTO> list = new List<ScorecardsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_AllScorecards_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					ScorecardsDTO scorecardsDTO = new ScorecardsDTO();
					scorecardsDTO.scorecardID = Conversions.ToInteger(sqlDataReader.GetValue(0));
					scorecardsDTO.scorecardFormatID = Conversions.ToInteger(sqlDataReader.GetValue(1));
					scorecardsDTO.ManagedByID = Conversions.ToInteger(sqlDataReader.GetValue(2));
					scorecardsDTO.AssociationID = Conversions.ToInteger(sqlDataReader.GetValue(3));
					scorecardsDTO.scorecardName = Conversions.ToString(sqlDataReader.GetValue(4));
					scorecardsDTO.levelID = Conversions.ToInteger(sqlDataReader.GetValue(5));
					scorecardsDTO.scGenID = Conversions.ToInteger(sqlDataReader.GetValue(6));
					scorecardsDTO.scOwner = Conversions.ToString(sqlDataReader.GetValue(7));
					scorecardsDTO.ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8)));
					bool flag = !Information.IsDBNull(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)));
					if (flag)
					{
						ScorecardsDTO scorecardsDTO2 = scorecardsDTO;
						object value = sqlDataReader.GetValue(9);
						int? num;
						scorecardsDTO2.sharepointID = ((value != null) ? ((int?)value) : num);
					}
					else
					{
						scorecardsDTO.sharepointID = -1;
					}
					scorecardsDTO.Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10)));
					scorecardsDTO.SCNameConcat = Conversions.ToString(sqlDataReader.GetValue(11));
					scorecardsDTO.Level = Conversions.ToString(sqlDataReader.GetValue(12));
					list.Add(scorecardsDTO);
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001D0 RID: 464 RVA: 0x00018B10 File Offset: 0x00016D10
		public static List<ScorecardsDTO> GetAllSCMetrics()
		{
			List<ScorecardsDTO> list = new List<ScorecardsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_AllScorecards_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardsDTO
					{
						scorecardID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						scorecardFormatID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						ManagedByID = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						AssociationID = Conversions.ToInteger(sqlDataReader.GetValue(3)),
						scorecardName = Conversions.ToString(sqlDataReader.GetValue(4)),
						levelID = Conversions.ToInteger(sqlDataReader.GetValue(5)),
						scGenID = Conversions.ToInteger(sqlDataReader.GetValue(6)),
						scOwner = Conversions.ToString(sqlDataReader.GetValue(7)),
						ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						sharepointID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)))),
						Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10))),
						SCNameConcat = Conversions.ToString(sqlDataReader.GetValue(11))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001D1 RID: 465 RVA: 0x00018CF8 File Offset: 0x00016EF8
		public static List<ScorecardsDTO> GetScorecardsBySCID(int SCID)
		{
			List<ScorecardsDTO> list = new List<ScorecardsDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<ScorecardsDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_ScorecardsBySCID_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@SCID", SCID)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new ScorecardsDTO
					{
						scorecardID = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						scorecardFormatID = Conversions.ToInteger(sqlDataReader.GetValue(1)),
						ManagedByID = Conversions.ToInteger(sqlDataReader.GetValue(2)),
						AssociationID = Conversions.ToInteger(sqlDataReader.GetValue(3)),
						scorecardName = Conversions.ToString(sqlDataReader.GetValue(4)),
						levelID = Conversions.ToInteger(sqlDataReader.GetValue(5)),
						scGenID = Conversions.ToInteger(sqlDataReader.GetValue(6)),
						scOwner = Conversions.ToString(sqlDataReader.GetValue(7)),
						ManagedByDesc = DBNullConversions.DBNullToText(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(8))),
						sharepointID = Convert.ToInt32(DBNullConversions.DBNullToZero(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(9)))),
						Active = DBNullConversions.DBNullToFalse(RuntimeHelpers.GetObjectValue(sqlDataReader.GetValue(10))),
						SCNameConcat = Conversions.ToString(sqlDataReader.GetValue(11))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001D2 RID: 466 RVA: 0x0000252E File Offset: 0x0000072E
		public static void SaveLock(LockYearDTO data)
		{
			PerfMgDB.SetLockYear("S", data);
		}

		// Token: 0x060001D3 RID: 467 RVA: 0x00018EFC File Offset: 0x000170FC
		internal static SqlCommand CreateSaveLockData(string operation, LockYearDTO data)
		{
			return new SqlCommand("dbo.usp_UPM_LockYear_set")
			{
				CommandType = CommandType.StoredProcedure,
				Parameters = 
				{
					new SqlParameter("@Operation", operation),
					new SqlParameter("@Year", data.Year),
					new SqlParameter("@Lock", data.Locked)
				}
			};
		}

		// Token: 0x060001D4 RID: 468 RVA: 0x00018F7C File Offset: 0x0001717C
		private static int SetLockYear(string operation, LockYearDTO data)
		{
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			int num;
			try
			{
				sqlConnection.Open();
				SqlCommand sqlCommand = PerfMgDB.CreateSaveLockData(operation, data);
				sqlCommand.Connection = sqlConnection;
				num = Conversions.ToInteger(sqlCommand.ExecuteScalar());
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return num;
		}

		// Token: 0x060001D5 RID: 469 RVA: 0x00019018 File Offset: 0x00017218
		public static List<LockYearDTO> GetLockStatusForYear(int year)
		{
			List<LockYearDTO> list = new List<LockYearDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LockYearDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "dbo.usp_upm_LockYear_get";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.StoredProcedure,
					Parameters = 
					{
						new SqlParameter("@year", year)
					}
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LockYearDTO
					{
						Year = Conversions.ToInteger(sqlDataReader.GetValue(0)),
						Locked = Conversions.ToBoolean(sqlDataReader.GetValue(1))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}

		// Token: 0x060001D6 RID: 470 RVA: 0x00019124 File Offset: 0x00017324
		public static List<LockYearDTO> GetLockedYears()
		{
			List<LockYearDTO> list = new List<LockYearDTO>();
			SqlConnection sqlConnection = new SqlConnection(PerfMgDB.ConnectionString);
			List<LockYearDTO> list2;
			try
			{
				sqlConnection.Open();
				string text = "select Year from dbo.T_UPM_LockYear where Lock = 1 ";
				SqlDataReader sqlDataReader = new SqlCommand(text, sqlConnection)
				{
					CommandType = CommandType.Text
				}.ExecuteReader();
				while (sqlDataReader.Read())
				{
					list.Add(new LockYearDTO
					{
						Year = Conversions.ToInteger(sqlDataReader.GetValue(0))
					});
				}
				list2 = list;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
			finally
			{
				bool flag = sqlConnection.State == ConnectionState.Open;
				if (flag)
				{
					sqlConnection.Close();
				}
				sqlConnection.Dispose();
			}
			return list2;
		}
	}
}
