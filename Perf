Imports System.Windows.Forms

Public Class ProgressWindow
    Inherits Form

    Public WithEvents ProgressBar1 As New ProgressBar()
    Public WithEvents StatusLabel As New Label()

    Public Sub New()
        Me.Text = "Uploading to Perfman"
        Me.Width = 400
        Me.Height = 120
        Me.FormBorderStyle = FormBorderStyle.FixedDialog
        Me.StartPosition = FormStartPosition.CenterScreen
        Me.MaximizeBox = False
        Me.MinimizeBox = False

        ProgressBar1.Width = 350
        ProgressBar1.Height = 30
        ProgressBar1.Top = 20
        ProgressBar1.Left = 20
        ProgressBar1.Style = ProgressBarStyle.Continuous
        ProgressBar1.Minimum = 0
        ProgressBar1.Maximum = 100
        Me.Controls.Add(ProgressBar1)

        StatusLabel.Top = 60
        StatusLabel.Left = 20
        StatusLabel.Width = 350
        StatusLabel.Text = "Starting upload..."
        Me.Controls.Add(StatusLabel)
    End Sub

    Public Sub SetProgress(value As Integer, Optional statusText As String = "")
        If Me.InvokeRequired Then
            Me.Invoke(Sub() SetProgress(value, statusText))
        Else
            ProgressBar1.Value = Math.Min(ProgressBar1.Maximum, Math.Max(ProgressBar1.Minimum, value))
            If Not String.IsNullOrEmpty(statusText) Then
                StatusLabel.Text = statusText
            End If
        End If
    End Sub
End Class

Private Function SaveExcelData(ByVal list As List(Of UPMPointsDTO), ByRef errorList As List(Of UPMPointsDTO)) As Integer
    Dim i As Integer = 0
    Dim db As New PMPointsDB
    Dim badList As New List(Of UPMPointsDTO)

    ' === Initialize and show progress bar window ===
    Dim progressForm As New ProgressWindow()
    progressForm.Show()
    progressForm.Refresh()

    Dim total As Integer = list.Count
    Dim current As Integer = 0

    For Each dto As UPMPointsDTO In list
        Try
            LogDebug("Saving Metric: " & dto.MetricID)
            LogDtoContents(dto)

            db.SavePointsArchive(dto)
            Dim j As Integer = db.SaveUPMPoints(dto)

            If j = 1 Then
                i += 1
            Else
                badList.Add(dto)
            End If
        Catch ex As Exception
            LogDebug("‚ùå EXCEPTION saving MetricID " & dto.MetricID)
            LogDebug("    Error Message: " & ex.Message)
            LogDebug("    Stack Trace: " & ex.StackTrace)
            badList.Add(dto)
        End Try

        current += 1
        Dim percentComplete As Integer = CInt((current / total) * 100)
        progressForm.SetProgress(percentComplete, $"Uploading {current} of {total}")
        Application.DoEvents() ' Allow UI updates
    Next

    progressForm.Close()

    errorList = badList
    Return i
End Function